Module(
    body=[
        Import(
            names=[
                alias(name='contextlib')]),
        Import(
            names=[
                alias(name='io')]),
        Import(
            names=[
                alias(name='json')]),
        Import(
            names=[
                alias(name='math')]),
        Import(
            names=[
                alias(name='os')]),
        Import(
            names=[
                alias(name='warnings')]),
        ImportFrom(
            module='dataclasses',
            names=[
                alias(name='asdict'),
                alias(name='dataclass'),
                alias(name='field'),
                alias(name='fields')],
            level=0),
        ImportFrom(
            module='datetime',
            names=[
                alias(name='timedelta')],
            level=0),
        ImportFrom(
            module='enum',
            names=[
                alias(name='Enum')],
            level=0),
        ImportFrom(
            module='pathlib',
            names=[
                alias(name='Path')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='Any'),
                alias(name='Dict'),
                alias(name='List'),
                alias(name='Optional'),
                alias(name='Union')],
            level=0),
        ImportFrom(
            module='huggingface_hub',
            names=[
                alias(name='get_full_repo_name')],
            level=0),
        ImportFrom(
            module='packaging',
            names=[
                alias(name='version')],
            level=0),
        ImportFrom(
            module='debug_utils',
            names=[
                alias(name='DebugOption')],
            level=1),
        ImportFrom(
            module='trainer_utils',
            names=[
                alias(name='EvaluationStrategy'),
                alias(name='FSDPOption'),
                alias(name='HubStrategy'),
                alias(name='IntervalStrategy'),
                alias(name='SchedulerType')],
            level=1),
        ImportFrom(
            module='utils',
            names=[
                alias(name='ACCELERATE_MIN_VERSION'),
                alias(name='ExplicitEnum'),
                alias(name='cached_property'),
                alias(name='is_accelerate_available'),
                alias(name='is_safetensors_available'),
                alias(name='is_sagemaker_dp_enabled'),
                alias(name='is_sagemaker_mp_enabled'),
                alias(name='is_torch_available'),
                alias(name='is_torch_bf16_cpu_available'),
                alias(name='is_torch_bf16_gpu_available'),
                alias(name='is_torch_mlu_available'),
                alias(name='is_torch_neuroncore_available'),
                alias(name='is_torch_npu_available'),
                alias(name='is_torch_tf32_available'),
                alias(name='is_torch_xla_available'),
                alias(name='is_torch_xpu_available'),
                alias(name='logging'),
                alias(name='requires_backends')],
            level=1),
        ImportFrom(
            module='utils.generic',
            names=[
                alias(name='strtobool')],
            level=1),
        ImportFrom(
            module='utils.import_utils',
            names=[
                alias(name='is_optimum_neuron_available')],
            level=1),
        Assign(
            targets=[
                Name(id='logger', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Name(id='logging', ctx=Load()),
                    attr='get_logger',
                    ctx=Load()),
                args=[
                    Name(id='__name__', ctx=Load())],
                keywords=[])),
        Assign(
            targets=[
                Name(id='log_levels', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Call(
                        func=Attribute(
                            value=Name(id='logging', ctx=Load()),
                            attr='get_log_levels_dict',
                            ctx=Load()),
                        args=[],
                        keywords=[]),
                    attr='copy',
                    ctx=Load()),
                args=[],
                keywords=[])),
        Assign(
            targets=[
                Name(id='trainer_log_levels', ctx=Store())],
            value=Call(
                func=Name(id='dict', ctx=Load()),
                args=[],
                keywords=[
                    keyword(
                        value=Name(id='log_levels', ctx=Load())),
                    keyword(
                        arg='passive',
                        value=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1)))])),
        If(
            test=Call(
                func=Name(id='is_torch_available', ctx=Load()),
                args=[],
                keywords=[]),
            body=[
                Import(
                    names=[
                        alias(name='torch')]),
                Import(
                    names=[
                        alias(name='torch.distributed', asname='dist')]),
                ImportFrom(
                    module='pytorch_utils',
                    names=[
                        alias(name='is_torch_greater_or_equal_than_2_0'),
                        alias(name='is_torch_greater_or_equal_than_2_3')],
                    level=1)],
            orelse=[]),
        If(
            test=Call(
                func=Name(id='is_accelerate_available', ctx=Load()),
                args=[],
                keywords=[]),
            body=[
                ImportFrom(
                    module='accelerate.state',
                    names=[
                        alias(name='AcceleratorState'),
                        alias(name='PartialState')],
                    level=0),
                ImportFrom(
                    module='accelerate.utils',
                    names=[
                        alias(name='DistributedType')],
                    level=0),
                ImportFrom(
                    module='trainer_pt_utils',
                    names=[
                        alias(name='AcceleratorConfig')],
                    level=1)],
            orelse=[]),
        If(
            test=Call(
                func=Name(id='is_torch_xla_available', ctx=Load()),
                args=[],
                keywords=[]),
            body=[
                Import(
                    names=[
                        alias(name='torch_xla.core.xla_model', asname='xm')])],
            orelse=[]),
        If(
            test=Call(
                func=Name(id='is_torch_neuroncore_available', ctx=Load()),
                args=[],
                keywords=[
                    keyword(
                        arg='check_device',
                        value=Constant(value=False))]),
            body=[
                If(
                    test=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='os', ctx=Load()),
                                attr='environ',
                                ctx=Load()),
                            attr='get',
                            ctx=Load()),
                        args=[
                            Constant(value='TORCHELASTIC_RUN_ID')],
                        keywords=[]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='is_optimum_neuron_available', ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='info',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='Make sure that you are performing the training with the NeuronTrainer from optimum[neuron], this will fail otherwise.')],
                                        keywords=[]))],
                            orelse=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='warning',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='Please use the NeuronTrainer from optimum[neuron] instead of the Transformers library to perform training on AWS Trainium instances. More information here: https://github.com/huggingface/optimum-neuron')],
                                        keywords=[])),
                                Import(
                                    names=[
                                        alias(name='torch_xla.distributed.xla_backend', asname='xbn')]),
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='isinstance', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Attribute(
                                                        value=Name(id='dist', ctx=Load()),
                                                        attr='group',
                                                        ctx=Load()),
                                                    attr='WORLD',
                                                    ctx=Load()),
                                                Attribute(
                                                    value=Name(id='xbn', ctx=Load()),
                                                    attr='ProcessGroupXla',
                                                    ctx=Load())],
                                            keywords=[])),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='dist', ctx=Load()),
                                                    attr='init_process_group',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[
                                                    keyword(
                                                        arg='backend',
                                                        value=Constant(value='xla'))])),
                                        If(
                                            test=UnaryOp(
                                                op=Not(),
                                                operand=Call(
                                                    func=Name(id='isinstance', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Name(id='dist', ctx=Load()),
                                                                attr='group',
                                                                ctx=Load()),
                                                            attr='WORLD',
                                                            ctx=Load()),
                                                        Attribute(
                                                            value=Name(id='xbn', ctx=Load()),
                                                            attr='ProcessGroupXla',
                                                            ctx=Load())],
                                                    keywords=[])),
                                            body=[
                                                Raise(
                                                    exc=Call(
                                                        func=Name(id='AssertionError', ctx=Load()),
                                                        args=[
                                                            Constant(value='Failed to initialize torch.distributed process group using XLA backend.')],
                                                        keywords=[]))],
                                            orelse=[])],
                                    orelse=[])])],
                    orelse=[])],
            orelse=[]),
        If(
            test=Call(
                func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                args=[],
                keywords=[]),
            body=[
                Import(
                    names=[
                        alias(name='smdistributed.modelparallel.torch', asname='smp')]),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='smp', ctx=Load()),
                            attr='init',
                            ctx=Load()),
                        args=[],
                        keywords=[]))],
            orelse=[]),
        FunctionDef(
            name='default_logdir',
            args=arguments(
                posonlyargs=[],
                args=[],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Same default as PyTorch\n    ')),
                Import(
                    names=[
                        alias(name='socket')]),
                ImportFrom(
                    module='datetime',
                    names=[
                        alias(name='datetime')],
                    level=0),
                Assign(
                    targets=[
                        Name(id='current_time', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='datetime', ctx=Load()),
                                    attr='now',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            attr='strftime',
                            ctx=Load()),
                        args=[
                            Constant(value='%b%d_%H-%M-%S')],
                        keywords=[])),
                Return(
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='os', ctx=Load()),
                                attr='path',
                                ctx=Load()),
                            attr='join',
                            ctx=Load()),
                        args=[
                            Constant(value='runs'),
                            BinOp(
                                left=BinOp(
                                    left=Name(id='current_time', ctx=Load()),
                                    op=Add(),
                                    right=Constant(value='_')),
                                op=Add(),
                                right=Call(
                                    func=Attribute(
                                        value=Name(id='socket', ctx=Load()),
                                        attr='gethostname',
                                        ctx=Load()),
                                    args=[],
                                    keywords=[]))],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='str', ctx=Load()),
            type_params=[]),
        FunctionDef(
            name='get_int_from_env',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='env_keys'),
                    arg(arg='default')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='Returns the first positive env value found in the `env_keys` list or the default.')),
                For(
                    target=Name(id='e', ctx=Store()),
                    iter=Name(id='env_keys', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='val', ctx=Store())],
                            value=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Name(id='e', ctx=Load()),
                                            UnaryOp(
                                                op=USub(),
                                                operand=Constant(value=1))],
                                        keywords=[])],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Name(id='val', ctx=Load()),
                                ops=[
                                    GtE()],
                                comparators=[
                                    Constant(value=0)]),
                            body=[
                                Return(
                                    value=Name(id='val', ctx=Load()))],
                            orelse=[])],
                    orelse=[]),
                Return(
                    value=Name(id='default', ctx=Load()))],
            decorator_list=[],
            type_params=[]),
        FunctionDef(
            name='get_xla_device_type',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='device',
                        annotation=Constant(value='torch.device'))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Returns the xla device type (CPU|GPU|TPU) or None if the device is a non-xla device.\n    ')),
                If(
                    test=Call(
                        func=Name(id='is_torch_xla_available', ctx=Load()),
                        args=[],
                        keywords=[]),
                    body=[
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='device', ctx=Load()),
                                    attr='type',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value='cpu')]),
                            body=[
                                Return(
                                    value=Constant(value='CPU'))],
                            orelse=[]),
                        Return(
                            value=Subscript(
                                value=Call(
                                    func=Attribute(
                                        value=Subscript(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='xm', ctx=Load()),
                                                    attr='xla_real_devices',
                                                    ctx=Load()),
                                                args=[
                                                    List(
                                                        elts=[
                                                            Name(id='device', ctx=Load())],
                                                        ctx=Load())],
                                                keywords=[]),
                                            slice=Constant(value=0),
                                            ctx=Load()),
                                        attr='split',
                                        ctx=Load()),
                                    args=[
                                        Constant(value=':')],
                                    keywords=[]),
                                slice=Constant(value=0),
                                ctx=Load()))],
                    orelse=[]),
                Return(
                    value=Constant(value=None))],
            decorator_list=[],
            returns=Subscript(
                value=Name(id='Optional', ctx=Load()),
                slice=Name(id='str', ctx=Load()),
                ctx=Load()),
            type_params=[]),
        ClassDef(
            name='OptimizerNames',
            bases=[
                Name(id='ExplicitEnum', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Stores the acceptable string identifiers for optimizers.\n    ')),
                Assign(
                    targets=[
                        Name(id='ADAMW_HF', ctx=Store())],
                    value=Constant(value='adamw_hf')),
                Assign(
                    targets=[
                        Name(id='ADAMW_TORCH', ctx=Store())],
                    value=Constant(value='adamw_torch')),
                Assign(
                    targets=[
                        Name(id='ADAMW_TORCH_FUSED', ctx=Store())],
                    value=Constant(value='adamw_torch_fused')),
                Assign(
                    targets=[
                        Name(id='ADAMW_TORCH_XLA', ctx=Store())],
                    value=Constant(value='adamw_torch_xla')),
                Assign(
                    targets=[
                        Name(id='ADAMW_TORCH_NPU_FUSED', ctx=Store())],
                    value=Constant(value='adamw_torch_npu_fused')),
                Assign(
                    targets=[
                        Name(id='ADAMW_APEX_FUSED', ctx=Store())],
                    value=Constant(value='adamw_apex_fused')),
                Assign(
                    targets=[
                        Name(id='ADAFACTOR', ctx=Store())],
                    value=Constant(value='adafactor')),
                Assign(
                    targets=[
                        Name(id='ADAMW_ANYPRECISION', ctx=Store())],
                    value=Constant(value='adamw_anyprecision')),
                Assign(
                    targets=[
                        Name(id='SGD', ctx=Store())],
                    value=Constant(value='sgd')),
                Assign(
                    targets=[
                        Name(id='ADAGRAD', ctx=Store())],
                    value=Constant(value='adagrad')),
                Assign(
                    targets=[
                        Name(id='ADAMW_BNB', ctx=Store())],
                    value=Constant(value='adamw_bnb_8bit')),
                Assign(
                    targets=[
                        Name(id='ADAMW_8BIT', ctx=Store())],
                    value=Constant(value='adamw_8bit')),
                Assign(
                    targets=[
                        Name(id='LION_8BIT', ctx=Store())],
                    value=Constant(value='lion_8bit')),
                Assign(
                    targets=[
                        Name(id='LION', ctx=Store())],
                    value=Constant(value='lion_32bit')),
                Assign(
                    targets=[
                        Name(id='PAGED_ADAMW', ctx=Store())],
                    value=Constant(value='paged_adamw_32bit')),
                Assign(
                    targets=[
                        Name(id='PAGED_ADAMW_8BIT', ctx=Store())],
                    value=Constant(value='paged_adamw_8bit')),
                Assign(
                    targets=[
                        Name(id='PAGED_LION', ctx=Store())],
                    value=Constant(value='paged_lion_32bit')),
                Assign(
                    targets=[
                        Name(id='PAGED_LION_8BIT', ctx=Store())],
                    value=Constant(value='paged_lion_8bit')),
                Assign(
                    targets=[
                        Name(id='RMSPROP', ctx=Store())],
                    value=Constant(value='rmsprop')),
                Assign(
                    targets=[
                        Name(id='RMSPROP_BNB', ctx=Store())],
                    value=Constant(value='rmsprop_bnb')),
                Assign(
                    targets=[
                        Name(id='RMSPROP_8BIT', ctx=Store())],
                    value=Constant(value='rmsprop_bnb_8bit')),
                Assign(
                    targets=[
                        Name(id='RMSPROP_32BIT', ctx=Store())],
                    value=Constant(value='rmsprop_bnb_32bit')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAMW', ctx=Store())],
                    value=Constant(value='galore_adamw')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAMW_8BIT', ctx=Store())],
                    value=Constant(value='galore_adamw_8bit')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAFACTOR', ctx=Store())],
                    value=Constant(value='galore_adafactor')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAMW_LAYERWISE', ctx=Store())],
                    value=Constant(value='galore_adamw_layerwise')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAMW_8BIT_LAYERWISE', ctx=Store())],
                    value=Constant(value='galore_adamw_8bit_layerwise')),
                Assign(
                    targets=[
                        Name(id='GALORE_ADAFACTOR_LAYERWISE', ctx=Store())],
                    value=Constant(value='galore_adafactor_layerwise'))],
            decorator_list=[],
            type_params=[]),
        Assign(
            targets=[
                Name(id='_VALID_DICT_FIELDS', ctx=Store())],
            value=List(
                elts=[
                    Constant(value='accelerator_config'),
                    Constant(value='fsdp_config'),
                    Constant(value='deepspeed'),
                    Constant(value='gradient_checkpointing_kwargs'),
                    Constant(value='lr_scheduler_kwargs')],
                ctx=Load())),
        FunctionDef(
            name='_convert_str_dict',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='passed_value',
                        annotation=Name(id='dict', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='Safely checks that a passed value is a dictionary and converts any string values to their appropriate types.')),
                For(
                    target=Tuple(
                        elts=[
                            Name(id='key', ctx=Store()),
                            Name(id='value', ctx=Store())],
                        ctx=Store()),
                    iter=Call(
                        func=Attribute(
                            value=Name(id='passed_value', ctx=Load()),
                            attr='items',
                            ctx=Load()),
                        args=[],
                        keywords=[]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='value', ctx=Load()),
                                    Name(id='dict', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Name(id='passed_value', ctx=Load()),
                                            slice=Name(id='key', ctx=Load()),
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='_convert_str_dict', ctx=Load()),
                                        args=[
                                            Name(id='value', ctx=Load())],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='value', ctx=Load()),
                                            Name(id='str', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        If(
                                            test=Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='value', ctx=Load()),
                                                        attr='lower',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Tuple(
                                                        elts=[
                                                            Constant(value='true'),
                                                            Constant(value='false')],
                                                        ctx=Load())]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Name(id='passed_value', ctx=Load()),
                                                            slice=Name(id='key', ctx=Load()),
                                                            ctx=Store())],
                                                    value=Compare(
                                                        left=Call(
                                                            func=Attribute(
                                                                value=Name(id='value', ctx=Load()),
                                                                attr='lower',
                                                                ctx=Load()),
                                                            args=[],
                                                            keywords=[]),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value='true')]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Attribute(
                                                            value=Name(id='value', ctx=Load()),
                                                            attr='isdigit',
                                                            ctx=Load()),
                                                        args=[],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Subscript(
                                                                    value=Name(id='passed_value', ctx=Load()),
                                                                    slice=Name(id='key', ctx=Load()),
                                                                    ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='int', ctx=Load()),
                                                                args=[
                                                                    Name(id='value', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Attribute(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='value', ctx=Load()),
                                                                            attr='replace',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Constant(value='.'),
                                                                            Constant(value=''),
                                                                            Constant(value=1)],
                                                                        keywords=[]),
                                                                    attr='isdigit',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Subscript(
                                                                            value=Name(id='passed_value', ctx=Load()),
                                                                            slice=Name(id='key', ctx=Load()),
                                                                            ctx=Store())],
                                                                    value=Call(
                                                                        func=Name(id='float', ctx=Load()),
                                                                        args=[
                                                                            Name(id='value', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[])])])],
                                    orelse=[])])],
                    orelse=[]),
                Return(
                    value=Name(id='passed_value', ctx=Load()))],
            decorator_list=[],
            type_params=[]),
        ClassDef(
            name='TrainingArguments',
            bases=[],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    TrainingArguments is the subset of the arguments we use in our example scripts **which relate to the training loop\n    itself**.\n\n    Using [`HfArgumentParser`] we can turn this class into\n    [argparse](https://docs.python.org/3/library/argparse#module-argparse) arguments that can be specified on the\n    command line.\n\n    Parameters:\n        output_dir (`str`):\n            The output directory where the model predictions and checkpoints will be written.\n        overwrite_output_dir (`bool`, *optional*, defaults to `False`):\n            If `True`, overwrite the content of the output directory. Use this to continue training if `output_dir`\n            points to a checkpoint directory.\n        do_train (`bool`, *optional*, defaults to `False`):\n            Whether to run training or not. This argument is not directly used by [`Trainer`], it\'s intended to be used\n            by your training/evaluation scripts instead. See the [example\n            scripts](https://github.com/huggingface/transformers/tree/main/examples) for more details.\n        do_eval (`bool`, *optional*):\n            Whether to run evaluation on the validation set or not. Will be set to `True` if `eval_strategy` is\n            different from `"no"`. This argument is not directly used by [`Trainer`], it\'s intended to be used by your\n            training/evaluation scripts instead. See the [example\n            scripts](https://github.com/huggingface/transformers/tree/main/examples) for more details.\n        do_predict (`bool`, *optional*, defaults to `False`):\n            Whether to run predictions on the test set or not. This argument is not directly used by [`Trainer`], it\'s\n            intended to be used by your training/evaluation scripts instead. See the [example\n            scripts](https://github.com/huggingface/transformers/tree/main/examples) for more details.\n        eval_strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"no"`):\n            The evaluation strategy to adopt during training. Possible values are:\n\n                - `"no"`: No evaluation is done during training.\n                - `"steps"`: Evaluation is done (and logged) every `eval_steps`.\n                - `"epoch"`: Evaluation is done at the end of each epoch.\n\n        prediction_loss_only (`bool`, *optional*, defaults to `False`):\n            When performing evaluation and generating predictions, only returns the loss.\n        per_device_train_batch_size (`int`, *optional*, defaults to 8):\n            The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for training.\n        per_device_eval_batch_size (`int`, *optional*, defaults to 8):\n            The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for evaluation.\n        gradient_accumulation_steps (`int`, *optional*, defaults to 1):\n            Number of updates steps to accumulate the gradients for, before performing a backward/update pass.\n\n            <Tip warning={true}>\n\n            When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,\n            evaluation, save will be conducted every `gradient_accumulation_steps * xxx_step` training examples.\n\n            </Tip>\n\n        eval_accumulation_steps (`int`, *optional*):\n            Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If\n            left unset, the whole predictions are accumulated on GPU/NPU/TPU before being moved to the CPU (faster but\n            requires more memory).\n        eval_delay (`float`, *optional*):\n            Number of epochs or steps to wait for before the first evaluation can be performed, depending on the\n            eval_strategy.\n        learning_rate (`float`, *optional*, defaults to 5e-5):\n            The initial learning rate for [`AdamW`] optimizer.\n        weight_decay (`float`, *optional*, defaults to 0):\n            The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in [`AdamW`]\n            optimizer.\n        adam_beta1 (`float`, *optional*, defaults to 0.9):\n            The beta1 hyperparameter for the [`AdamW`] optimizer.\n        adam_beta2 (`float`, *optional*, defaults to 0.999):\n            The beta2 hyperparameter for the [`AdamW`] optimizer.\n        adam_epsilon (`float`, *optional*, defaults to 1e-8):\n            The epsilon hyperparameter for the [`AdamW`] optimizer.\n        max_grad_norm (`float`, *optional*, defaults to 1.0):\n            Maximum gradient norm (for gradient clipping).\n        num_train_epochs(`float`, *optional*, defaults to 3.0):\n            Total number of training epochs to perform (if not an integer, will perform the decimal part percents of\n            the last epoch before stopping training).\n        max_steps (`int`, *optional*, defaults to -1):\n            If set to a positive number, the total number of training steps to perform. Overrides `num_train_epochs`.\n            For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until\n            `max_steps` is reached.\n        lr_scheduler_type (`str` or [`SchedulerType`], *optional*, defaults to `"linear"`):\n            The scheduler type to use. See the documentation of [`SchedulerType`] for all possible values.\n        lr_scheduler_kwargs (\'dict\', *optional*, defaults to {}):\n            The extra arguments for the lr_scheduler. See the documentation of each scheduler for possible values.\n        warmup_ratio (`float`, *optional*, defaults to 0.0):\n            Ratio of total training steps used for a linear warmup from 0 to `learning_rate`.\n        warmup_steps (`int`, *optional*, defaults to 0):\n            Number of steps used for a linear warmup from 0 to `learning_rate`. Overrides any effect of `warmup_ratio`.\n        log_level (`str`, *optional*, defaults to `passive`):\n            Logger log level to use on the main process. Possible choices are the log levels as strings: \'debug\',\n            \'info\', \'warning\', \'error\' and \'critical\', plus a \'passive\' level which doesn\'t set anything and keeps the\n            current log level for the Transformers library (which will be `"warning"` by default).\n        log_level_replica (`str`, *optional*, defaults to `"warning"`):\n            Logger log level to use on replicas. Same choices as `log_level`"\n        log_on_each_node (`bool`, *optional*, defaults to `True`):\n            In multinode distributed training, whether to log using `log_level` once per node, or only on the main\n            node.\n        logging_dir (`str`, *optional*):\n            [TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to\n            *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.\n        logging_strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"steps"`):\n            The logging strategy to adopt during training. Possible values are:\n\n                - `"no"`: No logging is done during training.\n                - `"epoch"`: Logging is done at the end of each epoch.\n                - `"steps"`: Logging is done every `logging_steps`.\n\n        logging_first_step (`bool`, *optional*, defaults to `False`):\n            Whether to log the first `global_step` or not.\n        logging_steps (`int` or `float`, *optional*, defaults to 500):\n            Number of update steps between two logs if `logging_strategy="steps"`. Should be an integer or a float in\n            range `[0,1)`. If smaller than 1, will be interpreted as ratio of total training steps.\n        logging_nan_inf_filter (`bool`, *optional*, defaults to `True`):\n            Whether to filter `nan` and `inf` losses for logging. If set to `True` the loss of every step that is `nan`\n            or `inf` is filtered and the average loss of the current logging window is taken instead.\n\n            <Tip>\n\n            `logging_nan_inf_filter` only influences the logging of loss values, it does not change the behavior the\n            gradient is computed or applied to the model.\n\n            </Tip>\n\n        save_strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"steps"`):\n            The checkpoint save strategy to adopt during training. Possible values are:\n\n                - `"no"`: No save is done during training.\n                - `"epoch"`: Save is done at the end of each epoch.\n                - `"steps"`: Save is done every `save_steps`.\n        save_steps (`int` or `float`, *optional*, defaults to 500):\n            Number of updates steps before two checkpoint saves if `save_strategy="steps"`. Should be an integer or a\n            float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of total training steps.\n        save_total_limit (`int`, *optional*):\n            If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in\n            `output_dir`. When `load_best_model_at_end` is enabled, the "best" checkpoint according to\n            `metric_for_best_model` will always be retained in addition to the most recent ones. For example, for\n            `save_total_limit=5` and `load_best_model_at_end`, the four last checkpoints will always be retained\n            alongside the best model. When `save_total_limit=1` and `load_best_model_at_end`, it is possible that two\n            checkpoints are saved: the last one and the best one (if they are different).\n        save_safetensors (`bool`, *optional*, defaults to `True`):\n            Use [safetensors](https://huggingface.co/docs/safetensors) saving and loading for state dicts instead of\n            default `torch.load` and `torch.save`.\n        save_on_each_node (`bool`, *optional*, defaults to `False`):\n            When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on\n            the main one.\n\n            This should not be activated when the different nodes use the same storage as the files will be saved with\n            the same names for each node.\n        save_only_model (`bool`, *optional*, defaults to `False`):\n            When checkpointing, whether to only save the model, or also the optimizer, scheduler & rng state.\n            Note that when this is true, you won\'t be able to resume training from checkpoint.\n            This enables you to save storage by not storing the optimizer, scheduler & rng state.\n            You can only load the model using `from_pretrained` with this option set to `True`.\n        restore_callback_states_from_checkpoint (`bool`, *optional*, defaults to `False`):\n            Whether to restore the callback states from the checkpoint. If `True`, will override\n            callbacks passed to the `Trainer` if they exist in the checkpoint."\n        use_cpu (`bool`, *optional*, defaults to `False`):\n            Whether or not to use cpu. If set to False, we will use cuda or mps device if available.\n        seed (`int`, *optional*, defaults to 42):\n            Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the\n            [`~Trainer.model_init`] function to instantiate the model if it has some randomly initialized parameters.\n        data_seed (`int`, *optional*):\n            Random seed to be used with data samplers. If not set, random generators for data sampling will use the\n            same seed as `seed`. This can be used to ensure reproducibility of data sampling, independent of the model\n            seed.\n        jit_mode_eval (`bool`, *optional*, defaults to `False`):\n            Whether or not to use PyTorch jit trace for inference.\n        use_ipex (`bool`, *optional*, defaults to `False`):\n            Use Intel extension for PyTorch when it is available. [IPEX\n            installation](https://github.com/intel/intel-extension-for-pytorch).\n        bf16 (`bool`, *optional*, defaults to `False`):\n            Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher\n            NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.\n        fp16 (`bool`, *optional*, defaults to `False`):\n            Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.\n        fp16_opt_level (`str`, *optional*, defaults to \'O1\'):\n            For `fp16` training, Apex AMP optimization level selected in [\'O0\', \'O1\', \'O2\', and \'O3\']. See details on\n            the [Apex documentation](https://nvidia.github.io/apex/amp).\n        fp16_backend (`str`, *optional*, defaults to `"auto"`):\n            This argument is deprecated. Use `half_precision_backend` instead.\n        half_precision_backend (`str`, *optional*, defaults to `"auto"`):\n            The backend to use for mixed precision training. Must be one of `"auto", "apex", "cpu_amp"`. `"auto"` will\n            use CPU/CUDA AMP or APEX depending on the PyTorch version detected, while the other choices will force the\n            requested backend.\n        bf16_full_eval (`bool`, *optional*, defaults to `False`):\n            Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm\n            metric values. This is an experimental API and it may change.\n        fp16_full_eval (`bool`, *optional*, defaults to `False`):\n            Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm\n            metric values.\n        tf32 (`bool`, *optional*):\n            Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends\n            on PyTorch\'s version default of `torch.backends.cuda.matmul.allow_tf32`. For more details please refer to\n            the [TF32](https://huggingface.co/docs/transformers/performance#tf32) documentation. This is an\n            experimental API and it may change.\n        local_rank (`int`, *optional*, defaults to -1):\n            Rank of the process during distributed training.\n        ddp_backend (`str`, *optional*):\n            The backend to use for distributed training. Must be one of `"nccl"`, `"mpi"`, `"ccl"`, `"gloo"`, `"hccl"`.\n        tpu_num_cores (`int`, *optional*):\n            When training on TPU, the number of TPU cores (automatically passed by launcher script).\n        dataloader_drop_last (`bool`, *optional*, defaults to `False`):\n            Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)\n            or not.\n        eval_steps (`int` or `float`, *optional*):\n            Number of update steps between two evaluations if `eval_strategy="steps"`. Will default to the same\n            value as `logging_steps` if not set. Should be an integer or a float in range `[0,1)`. If smaller than 1,\n            will be interpreted as ratio of total training steps.\n        dataloader_num_workers (`int`, *optional*, defaults to 0):\n            Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the\n            main process.\n        past_index (`int`, *optional*, defaults to -1):\n            Some models like [TransformerXL](../model_doc/transformerxl) or [XLNet](../model_doc/xlnet) can make use of\n            the past hidden states for their predictions. If this argument is set to a positive int, the `Trainer` will\n            use the corresponding output (usually index 2) as the past state and feed it to the model at the next\n            training step under the keyword argument `mems`.\n        run_name (`str`, *optional*, defaults to `output_dir`):\n            A descriptor for the run. Typically used for [wandb](https://www.wandb.com/) and\n            [mlflow](https://www.mlflow.org/) logging. If not specified, will be the same as `output_dir`.\n        disable_tqdm (`bool`, *optional*):\n            Whether or not to disable the tqdm progress bars and table of metrics produced by\n            [`~notebook.NotebookTrainingTracker`] in Jupyter Notebooks. Will default to `True` if the logging level is\n            set to warn or lower (default), `False` otherwise.\n        remove_unused_columns (`bool`, *optional*, defaults to `True`):\n            Whether or not to automatically remove the columns unused by the model forward method.\n        label_names (`List[str]`, *optional*):\n            The list of keys in your dictionary of inputs that correspond to the labels.\n\n            Will eventually default to the list of argument names accepted by the model that contain the word "label",\n            except if the model used is one of the `XxxForQuestionAnswering` in which case it will also include the\n            `["start_positions", "end_positions"]` keys.\n        load_best_model_at_end (`bool`, *optional*, defaults to `False`):\n            Whether or not to load the best model found during training at the end of training. When this option is\n            enabled, the best checkpoint will always be saved. See\n            [`save_total_limit`](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit)\n            for more.\n\n            <Tip>\n\n            When set to `True`, the parameters `save_strategy` needs to be the same as `eval_strategy`, and in\n            the case it is "steps", `save_steps` must be a round multiple of `eval_steps`.\n\n            </Tip>\n\n        metric_for_best_model (`str`, *optional*):\n            Use in conjunction with `load_best_model_at_end` to specify the metric to use to compare two different\n            models. Must be the name of a metric returned by the evaluation with or without the prefix `"eval_"`. Will\n            default to `"loss"` if unspecified and `load_best_model_at_end=True` (to use the evaluation loss).\n\n            If you set this value, `greater_is_better` will default to `True`. Don\'t forget to set it to `False` if\n            your metric is better when lower.\n        greater_is_better (`bool`, *optional*):\n            Use in conjunction with `load_best_model_at_end` and `metric_for_best_model` to specify if better models\n            should have a greater metric or not. Will default to:\n\n            - `True` if `metric_for_best_model` is set to a value that isn\'t `"loss"` or `"eval_loss"`.\n            - `False` if `metric_for_best_model` is not set, or set to `"loss"` or `"eval_loss"`.\n        ignore_data_skip (`bool`, *optional*, defaults to `False`):\n            When resuming training, whether or not to skip the epochs and batches to get the data loading at the same\n            stage as in the previous training. If set to `True`, the training will begin faster (as that skipping step\n            can take a long time) but will not yield the same results as the interrupted training would have.\n        fsdp (`bool`, `str` or list of [`~trainer_utils.FSDPOption`], *optional*, defaults to `\'\'`):\n            Use PyTorch Distributed Parallel Training (in distributed training only).\n\n            A list of options along the following:\n\n            - `"full_shard"`: Shard parameters, gradients and optimizer states.\n            - `"shard_grad_op"`: Shard optimizer states and gradients.\n            - `"hybrid_shard"`: Apply `FULL_SHARD` within a node, and replicate parameters across nodes.\n            - `"hybrid_shard_zero2"`: Apply `SHARD_GRAD_OP` within a node, and replicate parameters across nodes.\n            - `"offload"`: Offload parameters and gradients to CPUs (only compatible with `"full_shard"` and\n              `"shard_grad_op"`).\n            - `"auto_wrap"`: Automatically recursively wrap layers with FSDP using `default_auto_wrap_policy`.\n        fsdp_config (`str` or `dict`, *optional*):\n            Config to be used with fsdp (Pytorch Distributed Parallel Training). The value is either a location of\n            fsdp json config file (e.g., `fsdp_config.json`) or an already loaded json file as `dict`.\n\n            A List of config and its options:\n                - min_num_params (`int`, *optional*, defaults to `0`):\n                    FSDP\'s minimum number of parameters for Default Auto Wrapping. (useful only when `fsdp` field is\n                    passed).\n                - transformer_layer_cls_to_wrap (`List[str]`, *optional*):\n                    List of transformer layer class names (case-sensitive) to wrap, e.g, `BertLayer`, `GPTJBlock`,\n                    `T5Block` .... (useful only when `fsdp` flag is passed).\n                - backward_prefetch (`str`, *optional*)\n                    FSDP\'s backward prefetch mode. Controls when to prefetch next set of parameters (useful only when\n                    `fsdp` field is passed).\n\n                    A list of options along the following:\n\n                    - `"backward_pre"` : Prefetches the next set of parameters before the current set of parameter\'s\n                      gradient\n                        computation.\n                    - `"backward_post"` : This prefetches the next set of parameters after the current set of\n                      parameter’s\n                        gradient computation.\n                - forward_prefetch (`bool`, *optional*, defaults to `False`)\n                    FSDP\'s forward prefetch mode (useful only when `fsdp` field is passed).\n                     If `"True"`, then FSDP explicitly prefetches the next upcoming all-gather while executing in the\n                     forward pass.\n                - limit_all_gathers (`bool`, *optional*, defaults to `False`)\n                    FSDP\'s limit_all_gathers (useful only when `fsdp` field is passed).\n                     If `"True"`, FSDP explicitly synchronizes the CPU thread to prevent too many in-flight\n                     all-gathers.\n                - use_orig_params (`bool`, *optional*, defaults to `True`)\n                    If `"True"`, allows non-uniform `requires_grad` during init, which means support for interspersed\n                    frozen and trainable paramteres. Useful in cases such as parameter-efficient fine-tuning. Please\n                    refer this\n                    [blog](https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019\n                - sync_module_states (`bool`, *optional*, defaults to `True`)\n                    If `"True"`, each individually wrapped FSDP unit will broadcast module parameters from rank 0 to\n                    ensure they are the same across all ranks after initialization\n                - cpu_ram_efficient_loading (`bool`, *optional*, defaults to `False`)\n                    If `"True"`, only the first process loads the pretrained model checkpoint while all other processes\n                    have empty weights.  When this setting as `"True"`, `sync_module_states` also must to be `"True"`,\n                    otherwise all the processes except the main process would have random weights leading to unexpected\n                    behaviour during training.\n                - activation_checkpointing (`bool`, *optional*, defaults to `False`):\n                    If `"True"`, activation checkpointing is a technique to reduce memory usage by clearing activations of\n                    certain layers and recomputing them during a backward pass. Effectively, this trades extra\n                    computation time for reduced memory usage.\n                - xla (`bool`, *optional*, defaults to `False`):\n                    Whether to use PyTorch/XLA Fully Sharded Data Parallel Training. This is an experimental feature\n                    and its API may evolve in the future.\n                - xla_fsdp_settings (`dict`, *optional*)\n                    The value is a dictionary which stores the XLA FSDP wrapping parameters.\n\n                    For a complete list of options, please see [here](\n                    https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py).\n                - xla_fsdp_grad_ckpt (`bool`, *optional*, defaults to `False`):\n                    Will use gradient checkpointing over each nested XLA FSDP wrapped layer. This setting can only be\n                    used when the xla flag is set to true, and an auto wrapping policy is specified through\n                    fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.\n\n        deepspeed (`str` or `dict`, *optional*):\n            Use [Deepspeed](https://github.com/microsoft/deepspeed). This is an experimental feature and its API may\n            evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,\n            `ds_config.json`) or an already loaded json file as a `dict`"\n\n            <Tip warning={true}>\n                If enabling any Zero-init, make sure that your model is not initialized until\n                *after* initializing the `TrainingArguments`, else it will not be applied.\n            </Tip>\n\n        accelerator_config (`str`, `dict`, or `AcceleratorConfig`, *optional*):\n            Config to be used with the internal `Accelerator` implementation. The value is either a location of\n            accelerator json config file (e.g., `accelerator_config.json`), an already loaded json file as `dict`,\n            or an instance of [`~trainer_pt_utils.AcceleratorConfig`].\n\n            A list of config and its options:\n                - split_batches (`bool`, *optional*, defaults to `False`):\n                    Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If\n                    `True` the actual batch size used will be the same on any kind of distributed processes, but it must be a\n                    round multiple of the `num_processes` you are using. If `False`, actual batch size used will be the one set\n                    in your script multiplied by the number of processes.\n                - dispatch_batches (`bool`, *optional*):\n                    If set to `True`, the dataloader prepared by the Accelerator is only iterated through on the main process\n                    and then the batches are split and broadcast to each process. Will default to `True` for `DataLoader` whose\n                    underlying dataset is an `IterableDataset`, `False` otherwise.\n                - even_batches (`bool`, *optional*, defaults to `True`):\n                    If set to `True`, in cases where the total batch size across all processes does not exactly divide the\n                    dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among\n                    all workers.\n                - use_seedable_sampler (`bool`, *optional*, defaults to `True`):\n                    Whether or not use a fully seedable random sampler ([`accelerate.data_loader.SeedableRandomSampler`]). Ensures\n                    training results are fully reproducable using a different sampling technique. While seed-to-seed results\n                    may differ, on average the differences are neglible when using multiple different seeds to compare. Should\n                    also be ran with [`~utils.set_seed`] for the best results.\n\n        label_smoothing_factor (`float`, *optional*, defaults to 0.0):\n            The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded\n            labels are changed from 0s and 1s to `label_smoothing_factor/num_labels` and `1 - label_smoothing_factor +\n            label_smoothing_factor/num_labels` respectively.\n        debug (`str` or list of [`~debug_utils.DebugOption`], *optional*, defaults to `""`):\n            Enable one or more debug features. This is an experimental feature.\n\n            Possible options are:\n\n            - `"underflow_overflow"`: detects overflow in model\'s input/outputs and reports the last frames that led to\n              the event\n            - `"tpu_metrics_debug"`: print debug metrics on TPU\n\n            The options should be separated by whitespaces.\n        optim (`str` or [`training_args.OptimizerNames`], *optional*, defaults to `"adamw_torch"`):\n            The optimizer to use: adamw_hf, adamw_torch, adamw_torch_fused, adamw_apex_fused, adamw_anyprecision or\n            adafactor.\n        optim_args (`str`, *optional*):\n            Optional arguments that are supplied to AnyPrecisionAdamW.\n        group_by_length (`bool`, *optional*, defaults to `False`):\n            Whether or not to group together samples of roughly the same length in the training dataset (to minimize\n            padding applied and be more efficient). Only useful if applying dynamic padding.\n        length_column_name (`str`, *optional*, defaults to `"length"`):\n            Column name for precomputed lengths. If the column exists, grouping by length will use these values rather\n            than computing them on train startup. Ignored unless `group_by_length` is `True` and the dataset is an\n            instance of `Dataset`.\n        report_to (`str` or `List[str]`, *optional*, defaults to `"all"`):\n            The list of integrations to report the results and logs to. Supported platforms are `"azure_ml"`,\n            `"clearml"`, `"codecarbon"`, `"comet_ml"`, `"dagshub"`, `"dvclive"`, `"flyte"`, `"mlflow"`, `"neptune"`,\n            `"tensorboard"`, and `"wandb"`. Use `"all"` to report to all integrations installed, `"none"` for no\n            integrations.\n        ddp_find_unused_parameters (`bool`, *optional*):\n            When using distributed training, the value of the flag `find_unused_parameters` passed to\n            `DistributedDataParallel`. Will default to `False` if gradient checkpointing is used, `True` otherwise.\n        ddp_bucket_cap_mb (`int`, *optional*):\n            When using distributed training, the value of the flag `bucket_cap_mb` passed to `DistributedDataParallel`.\n        ddp_broadcast_buffers (`bool`, *optional*):\n            When using distributed training, the value of the flag `broadcast_buffers` passed to\n            `DistributedDataParallel`. Will default to `False` if gradient checkpointing is used, `True` otherwise.\n        dataloader_pin_memory (`bool`, *optional*, defaults to `True`):\n            Whether you want to pin memory in data loaders or not. Will default to `True`.\n        dataloader_persistent_workers (`bool`, *optional*, defaults to `False`):\n            If True, the data loader will not shut down the worker processes after a dataset has been consumed once.\n            This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will\n            increase RAM usage. Will default to `False`.\n        dataloader_prefetch_factor (`int`, *optional*):\n            Number of batches loaded in advance by each worker.\n            2 means there will be a total of 2 * num_workers batches prefetched across all workers.\n        skip_memory_metrics (`bool`, *optional*, defaults to `True`):\n            Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows\n            down the training and evaluation speed.\n        push_to_hub (`bool`, *optional*, defaults to `False`):\n            Whether or not to push the model to the Hub every time the model is saved. If this is activated,\n            `output_dir` will begin a git directory synced with the repo (determined by `hub_model_id`) and the content\n            will be pushed each time a save is triggered (depending on your `save_strategy`). Calling\n            [`~Trainer.save_model`] will also trigger a push.\n\n            <Tip warning={true}>\n\n            If `output_dir` exists, it needs to be a local clone of the repository to which the [`Trainer`] will be\n            pushed.\n\n            </Tip>\n\n        resume_from_checkpoint (`str`, *optional*):\n            The path to a folder with a valid checkpoint for your model. This argument is not directly used by\n            [`Trainer`], it\'s intended to be used by your training/evaluation scripts instead. See the [example\n            scripts](https://github.com/huggingface/transformers/tree/main/examples) for more details.\n        hub_model_id (`str`, *optional*):\n            The name of the repository to keep in sync with the local *output_dir*. It can be a simple model ID in\n            which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,\n            for instance `"user_name/model"`, which allows you to push to an organization you are a member of with\n            `"organization_name/model"`. Will default to `user_name/output_dir_name` with *output_dir_name* being the\n            name of `output_dir`.\n\n            Will default to the name of `output_dir`.\n        hub_strategy (`str` or [`~trainer_utils.HubStrategy`], *optional*, defaults to `"every_save"`):\n            Defines the scope of what is pushed to the Hub and when. Possible values are:\n\n            - `"end"`: push the model, its configuration, the tokenizer (if passed along to the [`Trainer`]) and a\n              draft of a model card when the [`~Trainer.save_model`] method is called.\n            - `"every_save"`: push the model, its configuration, the tokenizer (if passed along to the [`Trainer`]) and\n              a draft of a model card each time there is a model save. The pushes are asynchronous to not block\n              training, and in case the save are very frequent, a new push is only attempted if the previous one is\n              finished. A last push is made with the final model at the end of training.\n            - `"checkpoint"`: like `"every_save"` but the latest checkpoint is also pushed in a subfolder named\n              last-checkpoint, allowing you to resume training easily with\n              `trainer.train(resume_from_checkpoint="last-checkpoint")`.\n            - `"all_checkpoints"`: like `"checkpoint"` but all checkpoints are pushed like they appear in the output\n              folder (so you will get one checkpoint folder per folder in your final repository)\n\n        hub_token (`str`, *optional*):\n            The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with\n            `huggingface-cli login`.\n        hub_private_repo (`bool`, *optional*, defaults to `False`):\n            If True, the Hub repo will be set to private.\n        hub_always_push (`bool`, *optional*, defaults to `False`):\n            Unless this is `True`, the `Trainer` will skip pushing a checkpoint when the previous push is not finished.\n        gradient_checkpointing (`bool`, *optional*, defaults to `False`):\n            If True, use gradient checkpointing to save memory at the expense of slower backward pass.\n        gradient_checkpointing_kwargs (`dict`, *optional*, defaults to `None`):\n            Key word arguments to be passed to the `gradient_checkpointing_enable` method.\n        include_inputs_for_metrics (`bool`, *optional*, defaults to `False`):\n            Whether or not the inputs will be passed to the `compute_metrics` function. This is intended for metrics\n            that need inputs, predictions and references for scoring calculation in Metric class.\n        eval_do_concat_batches (`bool`, *optional*, defaults to `True`):\n            Whether to recursively concat inputs/losses/labels/predictions across batches. If `False`,\n            will instead store them as lists, with each batch kept separate.\n        auto_find_batch_size (`bool`, *optional*, defaults to `False`)\n            Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding\n            CUDA Out-of-Memory errors. Requires accelerate to be installed (`pip install accelerate`)\n        full_determinism (`bool`, *optional*, defaults to `False`)\n            If `True`, [`enable_full_determinism`] is called instead of [`set_seed`] to ensure reproducible results in\n            distributed training. Important: this will negatively impact the performance, so only use it for debugging.\n        torchdynamo (`str`, *optional*):\n            If set, the backend compiler for TorchDynamo. Possible choices are `"eager"`, `"aot_eager"`, `"inductor"`,\n            `"nvfuser"`, `"aot_nvfuser"`, `"aot_cudagraphs"`, `"ofi"`, `"fx2trt"`, `"onnxrt"` and `"ipex"`.\n        ray_scope (`str`, *optional*, defaults to `"last"`):\n            The scope to use when doing hyperparameter search with Ray. By default, `"last"` will be used. Ray will\n            then use the last checkpoint of all trials, compare those, and select the best one. However, other options\n            are also available. See the [Ray documentation](\n            https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial) for\n            more options.\n        ddp_timeout (`int`, *optional*, defaults to 1800):\n            The timeout for `torch.distributed.init_process_group` calls, used to avoid GPU socket timeouts when\n            performing slow operations in distributed runnings. Please refer the [PyTorch documentation]\n            (https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group) for more\n            information.\n        use_mps_device (`bool`, *optional*, defaults to `False`):\n            This argument is deprecated.`mps` device will be used if it is available similar to `cuda` device.\n        torch_compile (`bool`, *optional*, defaults to `False`):\n            Whether or not to compile the model using PyTorch 2.0\n            [`torch.compile`](https://pytorch.org/get-started/pytorch-2.0/).\n\n            This will use the best defaults for the [`torch.compile`\n            API](https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile).\n            You can customize the defaults with the argument `torch_compile_backend` and `torch_compile_mode` but we\n            don\'t guarantee any of them will work as the support is progressively rolled in in PyTorch.\n\n            This flag and the whole compile API is experimental and subject to change in future releases.\n        torch_compile_backend (`str`, *optional*):\n            The backend to use in `torch.compile`. If set to any value, `torch_compile` will be set to `True`.\n\n            Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.\n\n            This flag is experimental and subject to change in future releases.\n        torch_compile_mode (`str`, *optional*):\n            The mode to use in `torch.compile`. If set to any value, `torch_compile` will be set to `True`.\n\n            Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.\n\n            This flag is experimental and subject to change in future releases.\n        split_batches (`bool`, *optional*):\n            Whether or not the accelerator should split the batches yielded by the dataloaders across the devices\n            during distributed training. If\n\n            set to `True`, the actual batch size used will be the same on any kind of distributed processes, but it\n            must be a\n\n            round multiple of the number of processes you are using (such as GPUs).\n        include_tokens_per_second (`bool`, *optional*):\n            Whether or not to compute the number of tokens per second per device for training speed metrics.\n\n            This will iterate over the entire training dataloader once beforehand,\n\n            and will slow down the entire process.\n\n        include_num_input_tokens_seen (`bool`, *optional*):\n            Whether or not to track the number of input tokens seen throughout training.\n\n            May be slower in distributed training as gather operations must be called.\n\n        neftune_noise_alpha (`Optional[float]`):\n            If not `None`, this will activate NEFTune noise embeddings. This can drastically improve model performance\n            for instruction fine-tuning. Check out the [original paper](https://arxiv.org/abs/2310.05914) and the\n            [original code](https://github.com/neelsjain/NEFTune). Support transformers `PreTrainedModel` and also\n            `PeftModel` from peft.\n        optim_target_modules (`Union[str, List[str]]`, *optional*):\n            The target modules to optimize, i.e. the module names that you would like to train, right now this is used only for GaLore algorithm\n            https://arxiv.org/abs/2403.03507\n            See: https://github.com/jiaweizzhao/GaLore for more details. You need to make sure to pass a valid GaloRe\n            optimizer, e.g. one of: "galore_adamw", "galore_adamw_8bit", "galore_adafactor" and make sure that the target modules are `nn.Linear` modules\n            only.\n\n        batch_eval_metrics (`Optional[bool]`, defaults to `False`):\n            If set to `True`, evaluation will call compute_metrics at the end of each batch to accumulate statistics\n            rather than saving all eval logits in memory. When set to `True`, you must pass a compute_metrics function\n            that takes a boolean argument `compute_result`, which when passed `True`, will trigger the final global\n            summary statistics from the batch-level summary statistics you\'ve accumulated over the evaluation set.\n    ')),
                Assign(
                    targets=[
                        Name(id='framework', ctx=Store())],
                    value=Constant(value='pt')),
                AnnAssign(
                    target=Name(id='output_dir', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The output directory where the model predictions and checkpoints will be written.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='overwrite_output_dir', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Overwrite the content of the output directory. Use this to continue training if output_dir points to a checkpoint directory.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='do_train', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to run training.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='do_eval', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to run eval on the dev set.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='do_predict', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to run predictions on the test set.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='eval_strategy', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='IntervalStrategy', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='no')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The evaluation strategy to use.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='prediction_loss_only', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When performing evaluation and predictions, only returns the loss.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='per_device_train_batch_size', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=8)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Batch size per GPU/TPU/MPS/NPU core/CPU for training.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='per_device_eval_batch_size', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=8)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Batch size per GPU/TPU/MPS/NPU core/CPU for evaluation.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='per_gpu_train_batch_size', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Deprecated, the use of `--per_device_train_batch_size` is preferred. Batch size per GPU/TPU core/CPU for training.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='per_gpu_eval_batch_size', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Deprecated, the use of `--per_device_eval_batch_size` is preferred. Batch size per GPU/TPU core/CPU for evaluation.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='gradient_accumulation_steps', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=1)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Number of updates steps to accumulate before performing a backward/update pass.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='eval_accumulation_steps', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Number of predictions steps to accumulate before moving the tensors to the CPU.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='eval_delay', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='float', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Number of epochs or steps to wait for before the first evaluation can be performed, depending on the eval_strategy.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='learning_rate', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=5e-05)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The initial learning rate for AdamW.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='weight_decay', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0.0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Weight decay for AdamW if we apply some.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='adam_beta1', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0.9)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Beta1 for AdamW optimizer')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='adam_beta2', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0.999)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Beta2 for AdamW optimizer')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='adam_epsilon', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=1e-08)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Epsilon for AdamW optimizer.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='max_grad_norm', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=1.0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Max gradient norm.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='num_train_epochs', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=3.0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Total number of training epochs to perform.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='max_steps', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1))),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If > 0: set total number of training steps to perform. Override num_train_epochs.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='lr_scheduler_type', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='SchedulerType', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='linear')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The scheduler type to use.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='lr_scheduler_kwargs', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='dict', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default_factory',
                                value=Name(id='dict', ctx=Load())),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="Extra parameters for the lr_scheduler such as {'num_cycles': 1} for the cosine with hard restarts.")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='warmup_ratio', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0.0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Linear warmup over warmup_ratio fraction of total steps.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='warmup_steps', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Linear warmup over warmup_steps.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='log_level', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='passive')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help'),
                                        Constant(value='choices')],
                                    values=[
                                        Constant(value="Logger log level to use on the main node. Possible choices are the log levels as strings: 'debug', 'info', 'warning', 'error' and 'critical', plus a 'passive' level which doesn't set anything and lets the application set the level. Defaults to 'passive'."),
                                        Call(
                                            func=Attribute(
                                                value=Name(id='trainer_log_levels', ctx=Load()),
                                                attr='keys',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[])]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='log_level_replica', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='warning')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help'),
                                        Constant(value='choices')],
                                    values=[
                                        Constant(value='Logger log level to use on replica nodes. Same choices and defaults as ``log_level``'),
                                        Call(
                                            func=Attribute(
                                                value=Name(id='trainer_log_levels', ctx=Load()),
                                                attr='keys',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[])]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='log_on_each_node', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When doing a multinode distributed training, whether to log once per node or just once on the main node.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='logging_dir', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Tensorboard log dir.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='logging_strategy', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='IntervalStrategy', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='steps')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The logging strategy to use.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='logging_first_step', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Log the first global_step')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='logging_steps', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=500)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Log every X updates steps. Should be an integer or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of total training steps.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='logging_nan_inf_filter', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Filter nan and inf losses for logging.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_strategy', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='IntervalStrategy', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='steps')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The checkpoint save strategy to use.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_steps', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=500)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Save checkpoint every X updates steps. Should be an integer or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of total training steps.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_total_limit', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in `output_dir`. When `load_best_model_at_end` is enabled, the 'best' checkpoint according to `metric_for_best_model` will always be retained in addition to the most recent ones. For example, for `save_total_limit=5` and `load_best_model_at_end=True`, the four last checkpoints will always be retained alongside the best model. When `save_total_limit=1` and `load_best_model_at_end=True`, it is possible that two checkpoints are saved: the last one and the best one (if they are different). Default is unlimited checkpoints")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_safetensors', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Use safetensors saving and loading for state dicts instead of default torch.load and torch.save.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_on_each_node', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on the main one')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='save_only_model', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="When checkpointing, whether to only save the model, or also the optimizer, scheduler & rng state.Note that when this is true, you won't be able to resume training from checkpoint.This enables you to save storage by not storing the optimizer, scheduler & rng state.You can only load the model using from_pretrained with this option set to True.")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='restore_callback_states_from_checkpoint', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to restore the callback states from the checkpoint. If `True`, will override callbacks passed to the `Trainer` if they exist in the checkpoint.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='no_cuda', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='This argument is deprecated. It will be removed in version 5.0 of 🤗 Transformers.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='use_cpu', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value=' Whether or not to use cpu. If set to False, we will use cuda/tpu/mps/npu device if available.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='use_mps_device', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='This argument is deprecated. `mps` device will be used if available similar to `cuda` device. It will be removed in version 5.0 of 🤗 Transformers')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='seed', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=42)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Random seed that will be set at the beginning of training.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='data_seed', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Random seed to be used with data samplers.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='jit_mode_eval', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to use PyTorch jit trace for inference')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='use_ipex', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="Use Intel extension for PyTorch when it is available, installation: 'https://github.com/intel/intel-extension-for-pytorch'")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='bf16', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to use bf16 (mixed) precision instead of 32-bit. Requires Ampere or higher NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fp16', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to use fp16 (mixed) precision instead of 32-bit')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fp16_opt_level', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='O1')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']. See details at https://nvidia.github.io/apex/amp.html")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='half_precision_backend', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='auto')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help'),
                                        Constant(value='choices')],
                                    values=[
                                        Constant(value='The backend to be used for half precision.'),
                                        List(
                                            elts=[
                                                Constant(value='auto'),
                                                Constant(value='apex'),
                                                Constant(value='cpu_amp')],
                                            ctx=Load())]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='bf16_full_eval', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to use full bfloat16 evaluation instead of 32-bit. This is an experimental API and it may change.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fp16_full_eval', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to use full float16 evaluation instead of 32-bit')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='tf32', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to enable tf32 mode, available in Ampere and newer GPU architectures. This is an experimental API and it may change.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='local_rank', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1))),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='For distributed training: local_rank')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ddp_backend', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help'),
                                        Constant(value='choices')],
                                    values=[
                                        Constant(value='The backend to be used for distributed training'),
                                        List(
                                            elts=[
                                                Constant(value='nccl'),
                                                Constant(value='gloo'),
                                                Constant(value='mpi'),
                                                Constant(value='ccl'),
                                                Constant(value='hccl'),
                                                Constant(value='cncl')],
                                            ctx=Load())]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='tpu_num_cores', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='TPU: Number of TPU cores (automatically passed by launcher script)')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='tpu_metrics_debug', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Deprecated, the use of `--debug tpu_metrics_debug` is preferred. TPU: Whether to print debug metrics')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='debug', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='str', ctx=Load()),
                                Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='DebugOption', ctx=Load()),
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to enable debug mode. Current options: `underflow_overflow` (Detect underflow and overflow in activations and weights), `tpu_metrics_debug` (print debug metrics on TPU).')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dataloader_drop_last', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Drop the last incomplete batch if it is not divisible by the batch size.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='eval_steps', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='float', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Run an evaluation every X steps. Should be an integer or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of total training steps.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dataloader_num_workers', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dataloader_prefetch_factor', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=IfExp(
                                    test=BoolOp(
                                        op=Or(),
                                        values=[
                                            UnaryOp(
                                                op=Not(),
                                                operand=Call(
                                                    func=Name(id='is_torch_available', ctx=Load()),
                                                    args=[],
                                                    keywords=[])),
                                            Name(id='is_torch_greater_or_equal_than_2_0', ctx=Load())]),
                                    body=Constant(value=None),
                                    orelse=Constant(value=2))),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Number of batches loaded in advance by each worker. 2 means there will be a total of 2 * num_workers batches prefetched across all workers. Default is 2 for PyTorch < 2.0.0 and otherwise None.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='past_index', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1))),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If >=0, uses the corresponding part of the output as the past state for next step.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='run_name', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='An optional descriptor for the run. Notably used for wandb logging.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='disable_tqdm', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to disable the tqdm progress bars.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='remove_unused_columns', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Remove columns not required by the model when using an nlp.Dataset.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='label_names', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='str', ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The list of keys in your dictionary of inputs that correspond to the labels.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='load_best_model_at_end', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to load the best model found during training at the end of training. When this option is enabled, the best checkpoint will always be saved. See `save_total_limit` for more.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='metric_for_best_model', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The metric to use to compare two different models.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='greater_is_better', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether the `metric_for_best_model` should be maximized or not.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ignore_data_skip', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When resuming training, whether or not to skip the first epochs and batches to get to the same training data.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fsdp', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Subscript(
                                        value=Name(id='List', ctx=Load()),
                                        slice=Name(id='FSDPOption', ctx=Load()),
                                        ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to use PyTorch Fully Sharded Data Parallel (FSDP) training (in distributed training only). The base option should be `full_shard`, `shard_grad_op` or `no_shard` and you can add CPU-offload to `full_shard` or `shard_grad_op` like this: full_shard offload` or `shard_grad_op offload`. You can add auto-wrap to `full_shard` or `shard_grad_op` with the same syntax: full_shard auto_wrap` or `shard_grad_op auto_wrap`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fsdp_min_num_params', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="This parameter is deprecated. FSDP's minimum number of parameters for Default Auto Wrapping. (useful only when `fsdp` field is passed).")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fsdp_config', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='dict', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Config to be used with FSDP (Pytorch Fully Sharded  Data Parallel). The value is either a fsdp json config file (e.g., `fsdp_config.json`) or an already loaded json file as `dict`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fsdp_transformer_layer_cls_to_wrap', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='This parameter is deprecated. Transformer layer class name (case-sensitive) to wrap, e.g, `BertLayer`, `GPTJBlock`, `T5Block` .... (useful only when `fsdp` flag is passed).')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='accelerator_config', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='dict', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Config to be used with the internal Accelerator object initializtion. The value is either a accelerator json config file (e.g., `accelerator_config.json`) or an already loaded json file as `dict`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='deepspeed', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='dict', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Enable deepspeed and pass the path to deepspeed json config file (e.g. `ds_config.json`) or an already loaded json file as a dict')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='label_smoothing_factor', ctx=Store()),
                    annotation=Name(id='float', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=0.0)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The label smoothing epsilon to apply (zero means no label smoothing).')]))]),
                    simple=1),
                Assign(
                    targets=[
                        Name(id='default_optim', ctx=Store())],
                    value=Constant(value='adamw_torch')),
                AnnAssign(
                    target=Name(id='optim', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='OptimizerNames', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Name(id='default_optim', ctx=Load())),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The optimizer to use.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='optim_args', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Optional arguments to supply to optimizer.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='adafactor', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to replace AdamW by Adafactor.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='group_by_length', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to group samples of roughly the same length together when batching.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='length_column_name', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='length')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Column name with precomputed lengths to use when grouping by length.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='report_to', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Constant(value=None),
                                Name(id='str', ctx=Load()),
                                Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='str', ctx=Load()),
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The list of integrations to report the results and logs to.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ddp_find_unused_parameters', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When using distributed training, the value of the flag `find_unused_parameters` passed to `DistributedDataParallel`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ddp_bucket_cap_mb', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When using distributed training, the value of the flag `bucket_cap_mb` passed to `DistributedDataParallel`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ddp_broadcast_buffers', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='When using distributed training, the value of the flag `broadcast_buffers` passed to `DistributedDataParallel`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dataloader_pin_memory', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to pin memory for DataLoader.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dataloader_persistent_workers', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If True, the data loader will not shut down the worker processes after a dataset has been consumed once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will increase RAM usage.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='skip_memory_metrics', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to skip adding of memory profiler reports to metrics.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='use_legacy_prediction_loop', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to use the legacy prediction_loop in the Trainer.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='push_to_hub', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not to upload the trained model to the model hub after training.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='resume_from_checkpoint', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The path to a folder with a valid checkpoint for your model.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='hub_model_id', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The name of the repository to keep in sync with the local `output_dir`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='hub_strategy', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='HubStrategy', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='every_save')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The hub strategy to use when `--push_to_hub` is activated.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='hub_token', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The token to use to push to the Model Hub.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='hub_private_repo', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether the model repository is private or not.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='hub_always_push', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="Unless `True`, the Trainer will skip pushes if the previous one wasn't finished yet.")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='gradient_checkpointing', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If True, use gradient checkpointing to save memory at the expense of slower backward pass.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='gradient_checkpointing_kwargs', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Union', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='dict', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Gradient checkpointing key word arguments such as `use_reentrant`. Will be passed to `torch.utils.checkpoint.checkpoint` through `model.gradient_checkpointing_enable`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='include_inputs_for_metrics', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether or not the inputs will be passed to the `compute_metrics` function.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='eval_do_concat_batches', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=True)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to recursively concat inputs/losses/labels/predictions across batches. If `False`, will instead store them as lists, with each batch kept separate.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='fp16_backend', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='auto')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help'),
                                        Constant(value='choices')],
                                    values=[
                                        Constant(value='Deprecated. Use half_precision_backend instead'),
                                        List(
                                            elts=[
                                                Constant(value='auto'),
                                                Constant(value='apex'),
                                                Constant(value='cpu_amp')],
                                            ctx=Load())]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='evaluation_strategy', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='IntervalStrategy', ctx=Load()),
                                Name(id='str', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Deprecated. Use `eval_strategy` instead')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='push_to_hub_model_id', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The name of the repository to which push the `Trainer`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='push_to_hub_organization', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The name of the organization in with to which push the `Trainer`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='push_to_hub_token', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The token to use to push to the Model Hub.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='_n_gpu', ctx=Store()),
                    annotation=Name(id='int', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='init',
                                value=Constant(value=False)),
                            keyword(
                                arg='repr',
                                value=Constant(value=False)),
                            keyword(
                                arg='default',
                                value=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='mp_parameters', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Used by the SageMaker launcher to send mp-specific args. Ignored in Trainer')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='auto_find_batch_size', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to automatically decrease the batch size in half and rerun the training loop again each time a CUDA Out-of-Memory was reached')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='full_determinism', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Whether to call enable_full_determinism instead of set_seed for reproducibility in distributed training. Important: this will negatively impact the performance, so only use it for debugging.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='torchdynamo', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='This argument is deprecated, use `--torch_compile_backend` instead.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ray_scope', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value='last')),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='The scope to use when doing hyperparameter search with Ray. By default, `"last"` will be used. Ray will then use the last checkpoint of all trials, compare those, and select the best one. However, other options are also available. See the Ray documentation (https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial) for more options.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='ddp_timeout', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='int', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=1800)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Overrides the default timeout for distributed training (value should be given in seconds).')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='torch_compile', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If set to `True`, the model will be wrapped in `torch.compile`.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='torch_compile_backend', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Which backend to use with `torch.compile`, passing one will trigger a model compilation.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='torch_compile_mode', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Which mode to use with `torch.compile`, passing one will trigger a model compilation.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='dispatch_batches', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="Deprecated. Pass {'dispatch_batches':VALUE} to `accelerator_config`.")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='split_batches', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value="Deprecated. Pass {'split_batches':True} to `accelerator_config`.")]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='include_tokens_per_second', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If set to `True`, the speed metrics will include `tgs` (tokens per second per device).')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='include_num_input_tokens_seen', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='bool', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='If set to `True`, will track the number of input tokens seen throughout training. (May be slower in distributed training)')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='neftune_noise_alpha', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='float', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Activates neftune noise embeddings into the model. NEFTune has been proven to drastically improve model performances for instrcution fine-tuning. Check out the original paper here: https://arxiv.org/abs/2310.05914 and the original code here: https://github.com/neelsjain/NEFTune. Only supported for `PreTrainedModel` and `PeftModel` classes.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='optim_target_modules', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Constant(value=None),
                                Name(id='str', ctx=Load()),
                                Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='str', ctx=Load()),
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=None)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Target modules for the optimizer defined in the `optim` argument. Only used for the GaLore optimizer at the moment.')]))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='batch_eval_metrics', ctx=Store()),
                    annotation=Name(id='bool', ctx=Load()),
                    value=Call(
                        func=Name(id='field', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='default',
                                value=Constant(value=False)),
                            keyword(
                                arg='metadata',
                                value=Dict(
                                    keys=[
                                        Constant(value='help')],
                                    values=[
                                        Constant(value='Break eval metrics calculation into batches to save memory.')]))]),
                    simple=1),
                FunctionDef(
                    name='__post_init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        For(
                            target=Name(id='field', ctx=Store()),
                            iter=Name(id='_VALID_DICT_FIELDS', ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='passed_value', ctx=Store())],
                                    value=Call(
                                        func=Name(id='getattr', ctx=Load()),
                                        args=[
                                            Name(id='self', ctx=Load()),
                                            Name(id='field', ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='passed_value', ctx=Load()),
                                                    Name(id='str', ctx=Load())],
                                                keywords=[]),
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='passed_value', ctx=Load()),
                                                    attr='startswith',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='{')],
                                                keywords=[])]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='loaded_dict', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='json', ctx=Load()),
                                                    attr='loads',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='passed_value', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='loaded_dict', ctx=Store())],
                                            value=Call(
                                                func=Name(id='_convert_str_dict', ctx=Load()),
                                                args=[
                                                    Name(id='loaded_dict', ctx=Load())],
                                                keywords=[])),
                                        Expr(
                                            value=Call(
                                                func=Name(id='setattr', ctx=Load()),
                                                args=[
                                                    Name(id='self', ctx=Load()),
                                                    Name(id='field', ctx=Load()),
                                                    Name(id='loaded_dict', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='output_dir',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='output_dir',
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='path',
                                                ctx=Load()),
                                            attr='expanduser',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='output_dir',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_dir',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='output_dir',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_dir',
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='path',
                                                ctx=Load()),
                                            attr='join',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='output_dir',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='default_logdir', ctx=Load()),
                                                args=[],
                                                keywords=[])],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_dir',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_dir',
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='path',
                                                ctx=Load()),
                                            attr='expanduser',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='logging_dir',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='disable_tqdm',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='disable_tqdm',
                                            ctx=Store())],
                                    value=Compare(
                                        left=Call(
                                            func=Attribute(
                                                value=Name(id='logger', ctx=Load()),
                                                attr='getEffectiveLevel',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='logging', ctx=Load()),
                                                attr='WARN',
                                                ctx=Load())]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='evaluation_strategy',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='evaluation_strategy',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='eval_strategy',
                                        ctx=Load()),
                                    Name(id='EvaluationStrategy', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='using `EvaluationStrategy` for `eval_strategy` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `IntervalStrategy` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        attr='value',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='no_cuda',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='using `no_cuda` is deprecated and will be removed in version 5.0 of 🤗 Transformers. Use `use_cpu` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='use_cpu',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='no_cuda',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='eval_strategy',
                                        ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='logging_strategy',
                                        ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='save_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='save_strategy',
                                        ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='HubStrategy', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='hub_strategy',
                                        ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lr_scheduler_type',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='SchedulerType', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='lr_scheduler_type',
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='do_eval',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=False)]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='NO',
                                                ctx=Load())])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='do_eval',
                                            ctx=Store())],
                                    value=Constant(value=True))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='eval_steps',
                                                    ctx=Load()),
                                                ops=[
                                                    Is()],
                                                comparators=[
                                                    Constant(value=None)]),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='eval_steps',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=0)])])]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_steps',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='logger', ctx=Load()),
                                                    attr='info',
                                                    ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='using `logging_steps` to initialize `eval_steps` to '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='logging_steps',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='eval_steps',
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='logging_steps',
                                                ctx=Load()))],
                                    orelse=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='evaluation strategy '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='eval_strategy',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=' requires either non-zero --eval_steps or --logging_steps')])],
                                                keywords=[]))])],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_steps',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='logging strategy '),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='logging_strategy',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=' requires non-zero --logging_steps')])],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_steps',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=1)])]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_steps',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='logging_steps',
                                                        ctx=Load())],
                                                keywords=[])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='--logging_steps must be an integer if bigger than 1: '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='logging_steps',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_steps',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='logging_steps',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_steps',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=1)])]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_steps',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='eval_steps',
                                                        ctx=Load())],
                                                keywords=[])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='--eval_steps must be an integer if bigger than 1: '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='eval_steps',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_steps',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='eval_steps',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_steps',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=1)])]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_steps',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='save_steps',
                                                        ctx=Load())],
                                                keywords=[])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='--save_steps must be an integer if bigger than 1: '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='save_steps',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_steps',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='save_steps',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='load_best_model_at_end',
                                ctx=Load()),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='save_strategy',
                                                ctx=Load())]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='--load_best_model_at_end requires the save and eval strategy to match, but found\n- Evaluation strategy: '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='eval_strategy',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='\n- Save strategy: '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='save_strategy',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))],
                                    orelse=[]),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='eval_strategy',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='IntervalStrategy', ctx=Load()),
                                                        attr='STEPS',
                                                        ctx=Load())]),
                                            Compare(
                                                left=BinOp(
                                                    left=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='save_steps',
                                                        ctx=Load()),
                                                    op=Mod(),
                                                    right=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='eval_steps',
                                                        ctx=Load())),
                                                ops=[
                                                    NotEq()],
                                                comparators=[
                                                    Constant(value=0)])]),
                                    body=[
                                        If(
                                            test=BoolOp(
                                                op=Or(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='eval_steps',
                                                            ctx=Load()),
                                                        ops=[
                                                            Lt()],
                                                        comparators=[
                                                            Constant(value=1)]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='save_steps',
                                                            ctx=Load()),
                                                        ops=[
                                                            Lt()],
                                                        comparators=[
                                                            Constant(value=1)])]),
                                            body=[
                                                If(
                                                    test=UnaryOp(
                                                        op=Not(),
                                                        operand=BoolOp(
                                                            op=And(),
                                                            values=[
                                                                Compare(
                                                                    left=Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='eval_steps',
                                                                        ctx=Load()),
                                                                    ops=[
                                                                        Lt()],
                                                                    comparators=[
                                                                        Constant(value=1)]),
                                                                Compare(
                                                                    left=Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='save_steps',
                                                                        ctx=Load()),
                                                                    ops=[
                                                                        Lt()],
                                                                    comparators=[
                                                                        Constant(value=1)])])),
                                                    body=[
                                                        Raise(
                                                            exc=Call(
                                                                func=Name(id='ValueError', ctx=Load()),
                                                                args=[
                                                                    JoinedStr(
                                                                        values=[
                                                                            Constant(value='--load_best_model_at_end requires the saving steps to be a multiple of the evaluation steps, which cannot get guaranteed when mixing ratio and absolute steps for save_steps '),
                                                                            FormattedValue(
                                                                                value=Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='save_steps',
                                                                                    ctx=Load()),
                                                                                conversion=-1),
                                                                            Constant(value=' and eval_steps '),
                                                                            FormattedValue(
                                                                                value=Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='eval_steps',
                                                                                    ctx=Load()),
                                                                                conversion=-1),
                                                                            Constant(value='.')])],
                                                                keywords=[]))],
                                                    orelse=[]),
                                                Assign(
                                                    targets=[
                                                        Name(id='LARGE_MULTIPLIER', ctx=Store())],
                                                    value=Constant(value=1000000)),
                                                If(
                                                    test=Compare(
                                                        left=BinOp(
                                                            left=BinOp(
                                                                left=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='save_steps',
                                                                    ctx=Load()),
                                                                op=Mult(),
                                                                right=Name(id='LARGE_MULTIPLIER', ctx=Load())),
                                                            op=Mod(),
                                                            right=BinOp(
                                                                left=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='eval_steps',
                                                                    ctx=Load()),
                                                                op=Mult(),
                                                                right=Name(id='LARGE_MULTIPLIER', ctx=Load()))),
                                                        ops=[
                                                            NotEq()],
                                                        comparators=[
                                                            Constant(value=0)]),
                                                    body=[
                                                        Raise(
                                                            exc=Call(
                                                                func=Name(id='ValueError', ctx=Load()),
                                                                args=[
                                                                    JoinedStr(
                                                                        values=[
                                                                            Constant(value='--load_best_model_at_end requires the saving steps to be a multiple of the evaluation steps, but found '),
                                                                            FormattedValue(
                                                                                value=Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='save_steps',
                                                                                    ctx=Load()),
                                                                                conversion=-1),
                                                                            Constant(value=', which is not a multiple of '),
                                                                            FormattedValue(
                                                                                value=Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='eval_steps',
                                                                                    ctx=Load()),
                                                                                conversion=-1),
                                                                            Constant(value='.')])],
                                                                keywords=[]))],
                                                    orelse=[])],
                                            orelse=[]),
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='--load_best_model_at_end requires the saving steps to be a round multiple of the evaluation steps, but found '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='save_steps',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=', which is not a round multiple of '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='eval_steps',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='.')])],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='safetensors_available', ctx=Store())],
                            value=Call(
                                func=Name(id='is_safetensors_available', ctx=Load()),
                                args=[],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='save_safetensors',
                                        ctx=Load()),
                                    UnaryOp(
                                        op=Not(),
                                        operand=Name(id='safetensors_available', ctx=Load()))]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='--save_safetensors='),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='save_safetensors',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=' requires safetensors to be installed!')])],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    UnaryOp(
                                        op=Not(),
                                        operand=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_safetensors',
                                            ctx=Load())),
                                    Name(id='safetensors_available', ctx=Load())]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='info',
                                            ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='Found safetensors installation, but --save_safetensors='),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='save_safetensors',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='. Safetensors should be a preferred weights saving format due to security and performance reasons. If your model cannot be saved by safetensors please feel free to open an issue at https://github.com/huggingface/safetensors!')])],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='load_best_model_at_end',
                                                ctx=Load()),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='lr_scheduler_type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='SchedulerType', ctx=Load()),
                                                        attr='REDUCE_ON_PLATEAU',
                                                        ctx=Load())])]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='metric_for_best_model',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='metric_for_best_model',
                                            ctx=Store())],
                                    value=Constant(value='loss'))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='greater_is_better',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='metric_for_best_model',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='greater_is_better',
                                            ctx=Store())],
                                    value=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='metric_for_best_model',
                                            ctx=Load()),
                                        ops=[
                                            NotIn()],
                                        comparators=[
                                            List(
                                                elts=[
                                                    Constant(value='loss'),
                                                    Constant(value='eval_loss')],
                                                ctx=Load())]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='run_name',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='run_name',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='output_dir',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='framework',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='pt')]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[])]),
                            body=[
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fp16_backend',
                                                ctx=Load()),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fp16_backend',
                                                    ctx=Load()),
                                                ops=[
                                                    NotEq()],
                                                comparators=[
                                                    Constant(value='auto')])]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='`fp16_backend` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `half_precision_backend` instead'),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='half_precision_backend',
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fp16_backend',
                                                ctx=Load()))],
                                    orelse=[]),
                                If(
                                    test=BoolOp(
                                        op=Or(),
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='bf16',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='bf16_full_eval',
                                                ctx=Load())]),
                                    body=[
                                        If(
                                            test=BoolOp(
                                                op=And(),
                                                values=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='use_cpu',
                                                        ctx=Load()),
                                                    UnaryOp(
                                                        op=Not(),
                                                        operand=Call(
                                                            func=Name(id='is_torch_bf16_cpu_available', ctx=Load()),
                                                            args=[],
                                                            keywords=[])),
                                                    UnaryOp(
                                                        op=Not(),
                                                        operand=Call(
                                                            func=Name(id='is_torch_xla_available', ctx=Load()),
                                                            args=[],
                                                            keywords=[]))]),
                                            body=[
                                                Raise(
                                                    exc=Call(
                                                        func=Name(id='ValueError', ctx=Load()),
                                                        args=[
                                                            Constant(value="Your setup doesn't support bf16/(cpu, tpu, neuroncore). You need torch>=1.10")],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=UnaryOp(
                                                        op=Not(),
                                                        operand=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='use_cpu',
                                                            ctx=Load())),
                                                    body=[
                                                        If(
                                                            test=BoolOp(
                                                                op=And(),
                                                                values=[
                                                                    Call(
                                                                        func=Attribute(
                                                                            value=Attribute(
                                                                                value=Name(id='torch', ctx=Load()),
                                                                                attr='cuda',
                                                                                ctx=Load()),
                                                                            attr='is_available',
                                                                            ctx=Load()),
                                                                        args=[],
                                                                        keywords=[]),
                                                                    UnaryOp(
                                                                        op=Not(),
                                                                        operand=Call(
                                                                            func=Name(id='is_torch_bf16_gpu_available', ctx=Load()),
                                                                            args=[],
                                                                            keywords=[]))]),
                                                            body=[
                                                                Raise(
                                                                    exc=Call(
                                                                        func=Name(id='ValueError', ctx=Load()),
                                                                        args=[
                                                                            Constant(value="Your setup doesn't support bf16/gpu. You need torch>=1.10, using Ampere GPU with cuda>=11.0")],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=UnaryOp(
                                                                        op=Not(),
                                                                        operand=Call(
                                                                            func=Name(id='is_torch_xpu_available', ctx=Load()),
                                                                            args=[],
                                                                            keywords=[])),
                                                                    body=[
                                                                        ImportFrom(
                                                                            module='pytorch_utils',
                                                                            names=[
                                                                                alias(name='is_torch_greater_or_equal_than_1_12')],
                                                                            level=1),
                                                                        If(
                                                                            test=UnaryOp(
                                                                                op=Not(),
                                                                                operand=Name(id='is_torch_greater_or_equal_than_1_12', ctx=Load())),
                                                                            body=[
                                                                                Raise(
                                                                                    exc=Call(
                                                                                        func=Name(id='ValueError', ctx=Load()),
                                                                                        args=[
                                                                                            Constant(value="Your setup doesn't support bf16/xpu. You need torch>=1.12, using Intel XPU/GPU with IPEX installed")],
                                                                                        keywords=[]))],
                                                                            orelse=[])],
                                                                    orelse=[])])],
                                                    orelse=[])])],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fp16',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='bf16',
                                        ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='At most one of fp16 and bf16 can be True, but not both')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fp16_full_eval',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='bf16_full_eval',
                                        ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='At most one of fp16 and bf16 can be True for full eval, but not both')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='bf16',
                                ctx=Load()),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='half_precision_backend',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='apex')]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value=' `--half_precision_backend apex`: GPU bf16 is not supported by apex.')],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lr_scheduler_type',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='SchedulerType', ctx=Load()),
                                        attr='REDUCE_ON_PLATEAU',
                                        ctx=Load())]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='NO',
                                                ctx=Load())]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='lr_scheduler_type reduce_lr_on_plateau requires an eval strategy')],
                                                keywords=[]))],
                                    orelse=[]),
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='is_torch_available', ctx=Load()),
                                            args=[],
                                            keywords=[])),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='lr_scheduler_type reduce_lr_on_plateau requires torch>=0.2.0')],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='optim',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='OptimizerNames', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='optim',
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='adafactor',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`--adafactor` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `--optim adafactor` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='optim',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='OptimizerNames', ctx=Load()),
                                        attr='ADAFACTOR',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='optim',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='OptimizerNames', ctx=Load()),
                                                attr='ADAMW_TORCH_FUSED',
                                                ctx=Load())]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[])]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Call(
                                            func=Attribute(
                                                value=Name(id='version', ctx=Load()),
                                                attr='parse',
                                                ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='version', ctx=Load()),
                                                            attr='parse',
                                                            ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='torch', ctx=Load()),
                                                                attr='__version__',
                                                                ctx=Load())],
                                                        keywords=[]),
                                                    attr='base_version',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Lt()],
                                        comparators=[
                                            Call(
                                                func=Attribute(
                                                    value=Name(id='version', ctx=Load()),
                                                    attr='parse',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='2.0.0')],
                                                keywords=[])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='--optim adamw_torch_fused requires PyTorch 2.0 or higher')],
                                                keywords=[]))],
                                    orelse=[]),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='version', ctx=Load()),
                                                        attr='parse',
                                                        ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='version', ctx=Load()),
                                                                    attr='parse',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Attribute(
                                                                        value=Name(id='torch', ctx=Load()),
                                                                        attr='__version__',
                                                                        ctx=Load())],
                                                                keywords=[]),
                                                            attr='base_version',
                                                            ctx=Load())],
                                                    keywords=[]),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='version', ctx=Load()),
                                                            attr='parse',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='2.0.0')],
                                                        keywords=[])]),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fp16',
                                                ctx=Load())]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='--optim adamw_torch_fused with --fp16 requires PyTorch>2.0')],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='framework',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='pt')]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='device',
                                                        ctx=Load()),
                                                    attr='type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value='cpu')]),
                                            UnaryOp(
                                                op=Not(),
                                                operand=Name(id='is_torch_greater_or_equal_than_2_3', ctx=Load()))]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='cuda')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='mlu')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='npu')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='xpu')]),
                                    Compare(
                                        left=Call(
                                            func=Name(id='get_xla_device_type', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='device',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            NotIn()],
                                        comparators=[
                                            List(
                                                elts=[
                                                    Constant(value='GPU'),
                                                    Constant(value='CUDA')],
                                                ctx=Load())]),
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fp16',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fp16_full_eval',
                                                ctx=Load())])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='FP16 Mixed precision training with AMP or APEX (`--fp16`) and FP16 half precision evaluation (`--fp16_full_eval`) can only be used on CUDA or MLU devices or NPU devices or certain XPU devices (with IPEX).')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='framework',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='pt')]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='cuda')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='mlu')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='npu')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='xpu')]),
                                    Compare(
                                        left=Call(
                                            func=Name(id='get_xla_device_type', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='device',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            NotIn()],
                                        comparators=[
                                            List(
                                                elts=[
                                                    Constant(value='GPU'),
                                                    Constant(value='CUDA')],
                                                ctx=Load())]),
                                    Compare(
                                        left=Call(
                                            func=Name(id='get_xla_device_type', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='device',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='TPU')]),
                                    Compare(
                                        left=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='device',
                                                ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value='cpu')]),
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='bf16',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='bf16_full_eval',
                                                ctx=Load())])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='BF16 Mixed precision training with AMP (`--bf16`) and BF16 half precision evaluation (`--bf16_full_eval`) can only be used on CUDA, XPU (with IPEX), NPU, MLU or CPU/TPU/NeuronCore devices.')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='torchdynamo',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`torchdynamo` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `torch_compile_backend` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile_backend',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='torchdynamo',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='torch_compile_mode',
                                                    ctx=Load()),
                                                ops=[
                                                    IsNot()],
                                                comparators=[
                                                    Constant(value=None)]),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='torch_compile_backend',
                                                    ctx=Load()),
                                                ops=[
                                                    IsNot()],
                                                comparators=[
                                                    Constant(value=None)])]),
                                    UnaryOp(
                                        op=Not(),
                                        operand=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile',
                                            ctx=Load()))]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile',
                                            ctx=Store())],
                                    value=Constant(value=True))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='torch_compile',
                                        ctx=Load()),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile_backend',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile_backend',
                                            ctx=Store())],
                                    value=Constant(value='inductor'))],
                            orelse=[]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='torch_compile',
                                ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='prefix', ctx=Store())],
                                    value=Constant(value='ACCELERATE_DYNAMO_')),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=BinOp(
                                                left=Name(id='prefix', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value='BACKEND')),
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='torch_compile_backend',
                                        ctx=Load())),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='torch_compile_mode',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Attribute(
                                                        value=Name(id='os', ctx=Load()),
                                                        attr='environ',
                                                        ctx=Load()),
                                                    slice=BinOp(
                                                        left=Name(id='prefix', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value='MODE')),
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='torch_compile_mode',
                                                ctx=Load()))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='framework',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='pt')]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='torch_compile',
                                        ctx=Load())]),
                            body=[
                                If(
                                    test=Call(
                                        func=Name(id='is_torch_tf32_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        If(
                                            test=BoolOp(
                                                op=Or(),
                                                values=[
                                                    BoolOp(
                                                        op=And(),
                                                        values=[
                                                            Compare(
                                                                left=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='tf32',
                                                                    ctx=Load()),
                                                                ops=[
                                                                    Is()],
                                                                comparators=[
                                                                    Constant(value=None)]),
                                                            UnaryOp(
                                                                op=Not(),
                                                                operand=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='fp16',
                                                                    ctx=Load()))]),
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='bf16',
                                                        ctx=Load())]),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='logger', ctx=Load()),
                                                            attr='info',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value="Setting TF32 in CUDA backends to speedup torch compile, you won't see any improvement otherwise.")],
                                                        keywords=[])),
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='torch', ctx=Load()),
                                                                        attr='backends',
                                                                        ctx=Load()),
                                                                    attr='cuda',
                                                                    ctx=Load()),
                                                                attr='matmul',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=True)),
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Name(id='torch', ctx=Load()),
                                                                    attr='backends',
                                                                    ctx=Load()),
                                                                attr='cudnn',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=True))],
                                            orelse=[])],
                                    orelse=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='logger', ctx=Load()),
                                                    attr='warning',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='The speedups for torchdynamo mostly come wih GPU Ampere or higher and which is not detected here.')],
                                                keywords=[]))])],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='framework',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='pt')]),
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='tf32',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                If(
                                    test=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='tf32',
                                        ctx=Load()),
                                    body=[
                                        If(
                                            test=Call(
                                                func=Name(id='is_torch_tf32_available', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='torch', ctx=Load()),
                                                                        attr='backends',
                                                                        ctx=Load()),
                                                                    attr='cuda',
                                                                    ctx=Load()),
                                                                attr='matmul',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=True)),
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Name(id='torch', ctx=Load()),
                                                                    attr='backends',
                                                                    ctx=Load()),
                                                                attr='cudnn',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=True))],
                                            orelse=[
                                                Raise(
                                                    exc=Call(
                                                        func=Name(id='ValueError', ctx=Load()),
                                                        args=[
                                                            Constant(value='--tf32 requires Ampere or a newer GPU arch, cuda>=11 and torch>=1.7')],
                                                        keywords=[]))])],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='is_torch_tf32_available', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='torch', ctx=Load()),
                                                                        attr='backends',
                                                                        ctx=Load()),
                                                                    attr='cuda',
                                                                    ctx=Load()),
                                                                attr='matmul',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=False)),
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Attribute(
                                                                value=Attribute(
                                                                    value=Name(id='torch', ctx=Load()),
                                                                    attr='backends',
                                                                    ctx=Load()),
                                                                attr='cudnn',
                                                                ctx=Load()),
                                                            attr='allow_tf32',
                                                            ctx=Store())],
                                                    value=Constant(value=False))],
                                            orelse=[])])],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='half_precision_backend',
                                    ctx=Load()),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Constant(value='apex')]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='mixed_precision_dtype', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='ACCELERATE_MIXED_PRECISION'),
                                            Constant(value='no')],
                                        keywords=[])),
                                If(
                                    test=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fp16',
                                        ctx=Load()),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='mixed_precision_dtype', ctx=Store())],
                                            value=Constant(value='fp16'))],
                                    orelse=[
                                        If(
                                            test=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='bf16',
                                                ctx=Load()),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='mixed_precision_dtype', ctx=Store())],
                                                    value=Constant(value='bf16'))],
                                            orelse=[])]),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=Constant(value='ACCELERATE_MIXED_PRECISION'),
                                            ctx=Store())],
                                    value=Name(id='mixed_precision_dtype', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='report_to',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='info',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='The default value for the training argument `--report_to` will change in v5 (from all installed integrations to none). In v5, you will need to use `--report_to all` to get the same behavior as now. You should start updating your code and make this info disappear :-).')],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='report_to',
                                            ctx=Store())],
                                    value=Constant(value='all'))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='report_to',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value='all')]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='report_to',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            List(
                                                elts=[
                                                    Constant(value='all')],
                                                ctx=Load())])]),
                            body=[
                                ImportFrom(
                                    module='integrations',
                                    names=[
                                        alias(name='get_available_reporting_integrations')],
                                    level=1),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='report_to',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='get_available_reporting_integrations', ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=BoolOp(
                                        op=Or(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='report_to',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value='none')]),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='report_to',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    List(
                                                        elts=[
                                                            Constant(value='none')],
                                                        ctx=Load())])]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='report_to',
                                                    ctx=Store())],
                                            value=List(elts=[], ctx=Load()))],
                                    orelse=[
                                        If(
                                            test=UnaryOp(
                                                op=Not(),
                                                operand=Call(
                                                    func=Name(id='isinstance', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='report_to',
                                                            ctx=Load()),
                                                        Name(id='list', ctx=Load())],
                                                    keywords=[])),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='report_to',
                                                            ctx=Store())],
                                                    value=List(
                                                        elts=[
                                                            Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='report_to',
                                                                ctx=Load())],
                                                        ctx=Load()))],
                                            orelse=[])])]),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='warmup_ratio',
                                            ctx=Load()),
                                        ops=[
                                            Lt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='warmup_ratio',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=1)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='warmup_ratio must lie in range [0,1]')],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='warmup_ratio',
                                                    ctx=Load()),
                                                ops=[
                                                    Gt()],
                                                comparators=[
                                                    Constant(value=0)]),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='warmup_steps',
                                                    ctx=Load()),
                                                ops=[
                                                    Gt()],
                                                comparators=[
                                                    Constant(value=0)])]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='logger', ctx=Load()),
                                                    attr='info',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='Both warmup_ratio and warmup_steps given, warmup_steps will override any effect of warmup_ratio during training')],
                                                keywords=[]))],
                                    orelse=[])]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp',
                                        ctx=Load()),
                                    Name(id='bool', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='fsdp',
                                            ctx=Store())],
                                    value=IfExp(
                                        test=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='fsdp',
                                            ctx=Load()),
                                        body=Constant(value='full_shard'),
                                        orelse=Constant(value='')))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp',
                                        ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='fsdp',
                                            ctx=Store())],
                                    value=ListComp(
                                        elt=Call(
                                            func=Name(id='FSDPOption', ctx=Load()),
                                            args=[
                                                Name(id='s', ctx=Load())],
                                            keywords=[]),
                                        generators=[
                                            comprehension(
                                                target=Name(id='s', ctx=Store()),
                                                iter=Call(
                                                    func=Attribute(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='fsdp',
                                                            ctx=Load()),
                                                        attr='split',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ifs=[],
                                                is_async=0)]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='fsdp',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    List(
                                        elts=[
                                            Attribute(
                                                value=Name(id='FSDPOption', ctx=Load()),
                                                attr='OFFLOAD',
                                                ctx=Load())],
                                        ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='`--fsdp offload` can\'t work on its own. It needs to be added to `--fsdp full_shard` or `--fsdp shard_grad_op`. For example, `--fsdp "full_shard offload"`.')],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='FSDPOption', ctx=Load()),
                                                    attr='FULL_SHARD',
                                                    ctx=Load()),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='fsdp',
                                                        ctx=Load())]),
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='FSDPOption', ctx=Load()),
                                                    attr='SHARD_GRAD_OP',
                                                    ctx=Load()),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='fsdp',
                                                        ctx=Load())])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='`--fsdp full_shard` is not compatible with `--fsdp shard_grad_op`.')],
                                                keywords=[]))],
                                    orelse=[])]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='fsdp_config',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='fsdp_config',
                                            ctx=Store())],
                                    value=Dict(keys=[], values=[]))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            body=[
                                If(
                                    test=Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='`--fsdp_config` is useful only when `--fsdp` is specified.')],
                                                keywords=[]))],
                                    orelse=[]),
                                With(
                                    items=[
                                        withitem(
                                            context_expr=Call(
                                                func=Attribute(
                                                    value=Name(id='io', ctx=Load()),
                                                    attr='open',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='fsdp_config',
                                                        ctx=Load()),
                                                    Constant(value='r')],
                                                keywords=[
                                                    keyword(
                                                        arg='encoding',
                                                        value=Constant(value='utf-8'))]),
                                            optional_vars=Name(id='f', ctx=Store()))],
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_config',
                                                    ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='json', ctx=Load()),
                                                    attr='load',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='f', ctx=Load())],
                                                keywords=[])),
                                        For(
                                            target=Name(id='k', ctx=Store()),
                                            iter=Call(
                                                func=Name(id='list', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='keys',
                                                            ctx=Load()),
                                                        args=[],
                                                        keywords=[])],
                                                keywords=[]),
                                            body=[
                                                If(
                                                    test=Call(
                                                        func=Attribute(
                                                            value=Name(id='k', ctx=Load()),
                                                            attr='startswith',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='fsdp_')],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Name(id='v', ctx=Store())],
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='fsdp_config',
                                                                        ctx=Load()),
                                                                    attr='pop',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='k', ctx=Load())],
                                                                keywords=[])),
                                                        Assign(
                                                            targets=[
                                                                Subscript(
                                                                    value=Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='fsdp_config',
                                                                        ctx=Load()),
                                                                    slice=Subscript(
                                                                        value=Name(id='k', ctx=Load()),
                                                                        slice=Slice(
                                                                            lower=Constant(value=5)),
                                                                        ctx=Load()),
                                                                    ctx=Store())],
                                                            value=Name(id='v', ctx=Load()))],
                                                    orelse=[])],
                                            orelse=[])])],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='fsdp_min_num_params',
                                    ctx=Load()),
                                ops=[
                                    Gt()],
                                comparators=[
                                    Constant(value=0)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='using `--fsdp_min_num_params` is deprecated. Use fsdp_config instead '),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    slice=Constant(value='min_num_params'),
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='max', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='min_num_params'),
                                            Constant(value=0)],
                                        keywords=[]),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_min_num_params',
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='transformer_layer_cls_to_wrap'),
                                            Constant(value=None)],
                                        keywords=[]),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            slice=Constant(value='transformer_layer_cls_to_wrap'),
                                            ctx=Store())],
                                    value=List(
                                        elts=[
                                            Subscript(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_config',
                                                    ctx=Load()),
                                                slice=Constant(value='transformer_layer_cls_to_wrap'),
                                                ctx=Load())],
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='fsdp_transformer_layer_cls_to_wrap',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='using `--fsdp_transformer_layer_cls_to_wrap` is deprecated. Use fsdp_config instead '),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            slice=Constant(value='transformer_layer_cls_to_wrap'),
                                            ctx=Store())],
                                    value=BinOp(
                                        left=Call(
                                            func=Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_config',
                                                    ctx=Load()),
                                                attr='get',
                                                ctx=Load()),
                                            args=[
                                                Constant(value='transformer_layer_cls_to_wrap'),
                                                List(elts=[], ctx=Load())],
                                            keywords=[]),
                                        op=Add(),
                                        right=List(
                                            elts=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_transformer_layer_cls_to_wrap',
                                                    ctx=Load())],
                                            ctx=Load())))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            slice=Constant(value='min_num_params'),
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)])]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`min_num_params` is useful only when `--fsdp` is specified.')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Call(
                                            func=Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_config',
                                                    ctx=Load()),
                                                attr='get',
                                                ctx=Load()),
                                            args=[
                                                Constant(value='transformer_layer_cls_to_wrap'),
                                                Constant(value=None)],
                                            keywords=[]),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`transformer_layer_cls_to_wrap` is useful only when `--fsdp` is specified.')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            slice=Constant(value='min_num_params'),
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Call(
                                            func=Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp_config',
                                                    ctx=Load()),
                                                attr='get',
                                                ctx=Load()),
                                            args=[
                                                Constant(value='transformer_layer_cls_to_wrap'),
                                                Constant(value=None)],
                                            keywords=[]),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='`min_num_params` and `transformer_layer_cls_to_wrap` are mutually exclusive.')],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    slice=Constant(value='xla'),
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    attr='get',
                                    ctx=Load()),
                                args=[
                                    Constant(value='xla'),
                                    Constant(value=False)],
                                keywords=[])),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    slice=Constant(value='xla_fsdp_v2'),
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    attr='get',
                                    ctx=Load()),
                                args=[
                                    Constant(value='xla_fsdp_v2'),
                                    Constant(value=False)],
                                keywords=[])),
                        Assign(
                            targets=[
                                Subscript(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    slice=Constant(value='xla_fsdp_grad_ckpt'),
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp_config',
                                        ctx=Load()),
                                    attr='get',
                                    ctx=Load()),
                                args=[
                                    Constant(value='xla_fsdp_grad_ckpt'),
                                    Constant(value=False)],
                                keywords=[])),
                        If(
                            test=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='fsdp_config',
                                    ctx=Load()),
                                slice=Constant(value='xla'),
                                ctx=Load()),
                            body=[
                                If(
                                    test=Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='xla_fsdp_config',
                                                    ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='xla_fsdp_settings'),
                                                            Dict(keys=[], values=[])],
                                                        keywords=[]),
                                                    attr='copy',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[])),
                                        If(
                                            test=Compare(
                                                left=Constant(value='compute_dtype'),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='xla_fsdp_config',
                                                        ctx=Load())]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='xla_fsdp_config',
                                                                ctx=Load()),
                                                            slice=Constant(value='compute_dtype'),
                                                            ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='getattr', ctx=Load()),
                                                        args=[
                                                            Name(id='torch', ctx=Load()),
                                                            Subscript(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='xla_fsdp_config',
                                                                    ctx=Load()),
                                                                slice=Constant(value='compute_dtype'),
                                                                ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[]),
                                        If(
                                            test=Compare(
                                                left=Constant(value='buffer_dtype'),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='xla_fsdp_config',
                                                        ctx=Load())]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='xla_fsdp_config',
                                                                ctx=Load()),
                                                            slice=Constant(value='buffer_dtype'),
                                                            ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='getattr', ctx=Load()),
                                                        args=[
                                                            Name(id='torch', ctx=Load()),
                                                            Subscript(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='xla_fsdp_config',
                                                                    ctx=Load()),
                                                                slice=Constant(value='buffer_dtype'),
                                                                ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[])],
                                    orelse=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='XLA FSDP can be used only when `--fsdp` is specified.')],
                                                keywords=[]))])],
                            orelse=[
                                If(
                                    test=Subscript(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='fsdp_config',
                                            ctx=Load()),
                                        slice=Constant(value='xla_fsdp_grad_ckpt'),
                                        ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='`--xla_fsdp_grad_ckpt` is useful only when `--xla` is set to true.')],
                                                keywords=[]))],
                                    orelse=[])]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='len', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='fsdp',
                                                    ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=0)]),
                                    UnaryOp(
                                        op=Not(),
                                        operand=Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            slice=Constant(value='xla'),
                                            ctx=Load()))]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=Constant(value='ACCELERATE_USE_FSDP'),
                                            ctx=Store())],
                                    value=Constant(value='true')),
                                ImportFrom(
                                    module='accelerate.utils.constants',
                                    names=[
                                        alias(name='FSDP_AUTO_WRAP_POLICY'),
                                        alias(name='FSDP_SHARDING_STRATEGY')],
                                    level=0),
                                Assign(
                                    targets=[
                                        Name(id='prefix', ctx=Store())],
                                    value=Constant(value='FSDP_')),
                                For(
                                    target=Name(id='fsdp_option', ctx=Store()),
                                    iter=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='fsdp',
                                        ctx=Load()),
                                    body=[
                                        If(
                                            test=Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='fsdp_option', ctx=Load()),
                                                        attr='upper',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ops=[
                                                    In()],
                                                comparators=[
                                                    Name(id='FSDP_SHARDING_STRATEGY', ctx=Load())]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='os', ctx=Load()),
                                                                attr='environ',
                                                                ctx=Load()),
                                                            slice=JoinedStr(
                                                                values=[
                                                                    FormattedValue(
                                                                        value=Name(id='prefix', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value='SHARDING_STRATEGY')]),
                                                            ctx=Store())],
                                                    value=IfExp(
                                                        test=Call(
                                                            func=Name(id='is_accelerate_available', ctx=Load()),
                                                            args=[
                                                                Constant(value='0.26.0')],
                                                            keywords=[]),
                                                        body=Call(
                                                            func=Name(id='str', ctx=Load()),
                                                            args=[
                                                                BinOp(
                                                                    left=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='FSDP_SHARDING_STRATEGY', ctx=Load()),
                                                                            attr='index',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Call(
                                                                                func=Attribute(
                                                                                    value=Name(id='fsdp_option', ctx=Load()),
                                                                                    attr='upper',
                                                                                    ctx=Load()),
                                                                                args=[],
                                                                                keywords=[])],
                                                                        keywords=[]),
                                                                    op=Add(),
                                                                    right=Constant(value=1))],
                                                            keywords=[]),
                                                        orelse=Call(
                                                            func=Attribute(
                                                                value=Name(id='fsdp_option', ctx=Load()),
                                                                attr='upper',
                                                                ctx=Load()),
                                                            args=[],
                                                            keywords=[])))],
                                            orelse=[
                                                If(
                                                    test=Compare(
                                                        left=Name(id='fsdp_option', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='FSDPOption', ctx=Load()),
                                                                attr='OFFLOAD',
                                                                ctx=Load())]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Subscript(
                                                                    value=Attribute(
                                                                        value=Name(id='os', ctx=Load()),
                                                                        attr='environ',
                                                                        ctx=Load()),
                                                                    slice=JoinedStr(
                                                                        values=[
                                                                            FormattedValue(
                                                                                value=Name(id='prefix', ctx=Load()),
                                                                                conversion=-1),
                                                                            Constant(value='OFFLOAD_PARAMS')]),
                                                                    ctx=Store())],
                                                            value=Constant(value='true'))],
                                                    orelse=[
                                                        If(
                                                            test=Compare(
                                                                left=Name(id='fsdp_option', ctx=Load()),
                                                                ops=[
                                                                    Eq()],
                                                                comparators=[
                                                                    Attribute(
                                                                        value=Name(id='FSDPOption', ctx=Load()),
                                                                        attr='AUTO_WRAP',
                                                                        ctx=Load())]),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Subscript(
                                                                            value=Attribute(
                                                                                value=Name(id='os', ctx=Load()),
                                                                                attr='environ',
                                                                                ctx=Load()),
                                                                            slice=JoinedStr(
                                                                                values=[
                                                                                    FormattedValue(
                                                                                        value=Name(id='prefix', ctx=Load()),
                                                                                        conversion=-1),
                                                                                    Constant(value='AUTO_WRAP_POLICY')]),
                                                                            ctx=Store())],
                                                                    value=Subscript(
                                                                        value=Name(id='FSDP_AUTO_WRAP_POLICY', ctx=Load()),
                                                                        slice=Constant(value=0),
                                                                        ctx=Load())),
                                                                If(
                                                                    test=Compare(
                                                                        left=Subscript(
                                                                            value=Attribute(
                                                                                value=Name(id='self', ctx=Load()),
                                                                                attr='fsdp_config',
                                                                                ctx=Load()),
                                                                            slice=Constant(value='min_num_params'),
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            Gt()],
                                                                        comparators=[
                                                                            Constant(value=0)]),
                                                                    body=[
                                                                        Assign(
                                                                            targets=[
                                                                                Subscript(
                                                                                    value=Attribute(
                                                                                        value=Name(id='os', ctx=Load()),
                                                                                        attr='environ',
                                                                                        ctx=Load()),
                                                                                    slice=JoinedStr(
                                                                                        values=[
                                                                                            FormattedValue(
                                                                                                value=Name(id='prefix', ctx=Load()),
                                                                                                conversion=-1),
                                                                                            Constant(value='MIN_NUM_PARAMS')]),
                                                                                    ctx=Store())],
                                                                            value=Call(
                                                                                func=Name(id='str', ctx=Load()),
                                                                                args=[
                                                                                    Subscript(
                                                                                        value=Attribute(
                                                                                            value=Name(id='self', ctx=Load()),
                                                                                            attr='fsdp_config',
                                                                                            ctx=Load()),
                                                                                        slice=Constant(value='min_num_params'),
                                                                                        ctx=Load())],
                                                                                keywords=[])),
                                                                        Assign(
                                                                            targets=[
                                                                                Subscript(
                                                                                    value=Attribute(
                                                                                        value=Name(id='os', ctx=Load()),
                                                                                        attr='environ',
                                                                                        ctx=Load()),
                                                                                    slice=JoinedStr(
                                                                                        values=[
                                                                                            FormattedValue(
                                                                                                value=Name(id='prefix', ctx=Load()),
                                                                                                conversion=-1),
                                                                                            Constant(value='AUTO_WRAP_POLICY')]),
                                                                                    ctx=Store())],
                                                                            value=Subscript(
                                                                                value=Name(id='FSDP_AUTO_WRAP_POLICY', ctx=Load()),
                                                                                slice=Constant(value=1),
                                                                                ctx=Load()))],
                                                                    orelse=[
                                                                        If(
                                                                            test=Compare(
                                                                                left=Call(
                                                                                    func=Attribute(
                                                                                        value=Attribute(
                                                                                            value=Name(id='self', ctx=Load()),
                                                                                            attr='fsdp_config',
                                                                                            ctx=Load()),
                                                                                        attr='get',
                                                                                        ctx=Load()),
                                                                                    args=[
                                                                                        Constant(value='transformer_layer_cls_to_wrap'),
                                                                                        Constant(value=None)],
                                                                                    keywords=[]),
                                                                                ops=[
                                                                                    IsNot()],
                                                                                comparators=[
                                                                                    Constant(value=None)]),
                                                                            body=[
                                                                                Assign(
                                                                                    targets=[
                                                                                        Subscript(
                                                                                            value=Attribute(
                                                                                                value=Name(id='os', ctx=Load()),
                                                                                                attr='environ',
                                                                                                ctx=Load()),
                                                                                            slice=JoinedStr(
                                                                                                values=[
                                                                                                    FormattedValue(
                                                                                                        value=Name(id='prefix', ctx=Load()),
                                                                                                        conversion=-1),
                                                                                                    Constant(value='TRANSFORMER_CLS_TO_WRAP')]),
                                                                                            ctx=Store())],
                                                                                    value=Call(
                                                                                        func=Attribute(
                                                                                            value=Constant(value=','),
                                                                                            attr='join',
                                                                                            ctx=Load()),
                                                                                        args=[
                                                                                            Subscript(
                                                                                                value=Attribute(
                                                                                                    value=Name(id='self', ctx=Load()),
                                                                                                    attr='fsdp_config',
                                                                                                    ctx=Load()),
                                                                                                slice=Constant(value='transformer_layer_cls_to_wrap'),
                                                                                                ctx=Load())],
                                                                                        keywords=[]))],
                                                                            orelse=[])])],
                                                            orelse=[])])])],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='prefetch_policy', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='fsdp_config',
                                                ctx=Load()),
                                            attr='get',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='backward_prefetch'),
                                            Constant(value='NO_PREFETCH')],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='prefix', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='BACKWARD_PREFETCH')]),
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='prefetch_policy', ctx=Load()),
                                            attr='upper',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='prefix', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='FORWARD_PREFETCH')]),
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='str', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='forward_prefetch'),
                                                            Constant(value='false')],
                                                        keywords=[])],
                                                keywords=[]),
                                            attr='lower',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='sync_module_states', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='str', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='sync_module_states'),
                                                            Constant(value='true')],
                                                        keywords=[])],
                                                keywords=[]),
                                            attr='lower',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='cpu_ram_efficient_loading', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='str', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='cpu_ram_efficient_loading'),
                                                            Constant(value='false')],
                                                        keywords=[])],
                                                keywords=[]),
                                            attr='lower',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Name(id='sync_module_states', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value='false')]),
                                            Compare(
                                                left=Name(id='cpu_ram_efficient_loading', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value='true')])]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='`sync_module_states` must be `"True"` if `cpu_ram_efficient_loading` is `"True"`')],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='prefix', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='SYNC_MODULE_STATES')]),
                                            ctx=Store())],
                                    value=Name(id='sync_module_states', ctx=Load())),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='prefix', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='CPU_RAM_EFFICIENT_LOADING')]),
                                            ctx=Store())],
                                    value=Name(id='cpu_ram_efficient_loading', ctx=Load())),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Name(id='prefix', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='USE_ORIG_PARAMS')]),
                                            ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='str', ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='fsdp_config',
                                                                ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='use_orig_params'),
                                                            Constant(value='true')],
                                                        keywords=[])],
                                                keywords=[]),
                                            attr='lower',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='is_accelerate_available', ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='isinstance', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='accelerator_config',
                                                    ctx=Load()),
                                                Name(id='AcceleratorConfig', ctx=Load())],
                                            keywords=[])),
                                    body=[
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='accelerator_config',
                                                    ctx=Load()),
                                                ops=[
                                                    Is()],
                                                comparators=[
                                                    Constant(value=None)]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='accelerator_config',
                                                            ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='AcceleratorConfig', ctx=Load()),
                                                        args=[],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='accelerator_config',
                                                                ctx=Load()),
                                                            Name(id='dict', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='accelerator_config',
                                                                    ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='AcceleratorConfig', ctx=Load()),
                                                                args=[],
                                                                keywords=[
                                                                    keyword(
                                                                        value=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='accelerator_config',
                                                                            ctx=Load()))]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Name(id='isinstance', ctx=Load()),
                                                                args=[
                                                                    Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='accelerator_config',
                                                                        ctx=Load()),
                                                                    Name(id='type', ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Raise(
                                                                    exc=Call(
                                                                        func=Name(id='NotImplementedError', ctx=Load()),
                                                                        args=[
                                                                            Constant(value='Tried passing in a callable to `accelerator_config`, but this is not supported. Please pass in a fully constructed `AcceleratorConfig` object instead.')],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                Assign(
                                                                    targets=[
                                                                        Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='accelerator_config',
                                                                            ctx=Store())],
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='AcceleratorConfig', ctx=Load()),
                                                                            attr='from_json_file',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Attribute(
                                                                                value=Name(id='self', ctx=Load()),
                                                                                attr='accelerator_config',
                                                                                ctx=Load())],
                                                                        keywords=[]))])])])],
                                    orelse=[]),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='dispatch_batches',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value="Using `--dispatch_batches` is deprecated and will be removed in version 4.41 of 🤗 Transformers. Use `--accelerator_config {'dispatch_batches':VALUE} instead"),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='accelerator_config',
                                                        ctx=Load()),
                                                    attr='dispatch_batches',
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='dispatch_batches',
                                                ctx=Load()))],
                                    orelse=[]),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='split_batches',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value="Using `--split_batches` is deprecated and will be removed in version 4.41 of 🤗 Transformers. Use `--accelerator_config {'split_batches':VALUE} instead"),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='accelerator_config',
                                                        ctx=Load()),
                                                    attr='split_batches',
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='split_batches',
                                                ctx=Load()))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='tpu_metrics_debug',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='using `--tpu_metrics_debug` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `--debug tpu_metrics_debug` instead'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='debug',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='debug',
                                                    ctx=Store())],
                                            value=Constant(value=' tpu_metrics_debug'))],
                                    orelse=[
                                        AugAssign(
                                            target=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='debug',
                                                ctx=Store()),
                                            op=Add(),
                                            value=Constant(value=' tpu_metrics_debug'))]),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='tpu_metrics_debug',
                                            ctx=Store())],
                                    value=Constant(value=False))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='debug',
                                        ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='debug',
                                            ctx=Store())],
                                    value=ListComp(
                                        elt=Call(
                                            func=Name(id='DebugOption', ctx=Load()),
                                            args=[
                                                Name(id='s', ctx=Load())],
                                            keywords=[]),
                                        generators=[
                                            comprehension(
                                                target=Name(id='s', ctx=Store()),
                                                iter=Call(
                                                    func=Attribute(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='debug',
                                                            ctx=Load()),
                                                        attr='split',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ifs=[],
                                                is_async=0)]))],
                            orelse=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='debug',
                                            ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='debug',
                                                    ctx=Store())],
                                            value=List(elts=[], ctx=Load()))],
                                    orelse=[])]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='deepspeed_plugin',
                                    ctx=Store())],
                            value=Constant(value=None)),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='deepspeed',
                                ctx=Load()),
                            body=[
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='is_accelerate_available', ctx=Load()),
                                            args=[],
                                            keywords=[])),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='--deepspeed requires Accelerate to be installed: `pip install accelerate`.')],
                                                keywords=[]))],
                                    orelse=[]),
                                ImportFrom(
                                    module='transformers.integrations.deepspeed',
                                    names=[
                                        alias(name='HfTrainerDeepSpeedConfig')],
                                    level=0),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='hf_deepspeed_config',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='HfTrainerDeepSpeedConfig', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='deepspeed',
                                                ctx=Load())],
                                        keywords=[])),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='hf_deepspeed_config',
                                                ctx=Load()),
                                            attr='trainer_config_process',
                                            ctx=Load()),
                                        args=[
                                            Name(id='self', ctx=Load())],
                                        keywords=[])),
                                ImportFrom(
                                    module='accelerate.utils',
                                    names=[
                                        alias(name='DeepSpeedPlugin')],
                                    level=0),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=Constant(value='ACCELERATE_USE_DEEPSPEED'),
                                            ctx=Store())],
                                    value=Constant(value='true')),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='deepspeed_plugin',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='DeepSpeedPlugin', ctx=Load()),
                                        args=[],
                                        keywords=[
                                            keyword(
                                                arg='hf_ds_config',
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='hf_deepspeed_config',
                                                    ctx=Load()))]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='strtobool', ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='os', ctx=Load()),
                                                        attr='environ',
                                                        ctx=Load()),
                                                    attr='get',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='ACCELERATE_USE_DEEPSPEED'),
                                                    Constant(value='false')],
                                                keywords=[])],
                                        keywords=[]),
                                    body=[
                                        ImportFrom(
                                            module='accelerate.utils',
                                            names=[
                                                alias(name='DeepSpeedPlugin')],
                                            level=0),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='deepspeed_plugin',
                                                    ctx=Store())],
                                            value=Call(
                                                func=Name(id='DeepSpeedPlugin', ctx=Load()),
                                                args=[],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='mixed_precision', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='os', ctx=Load()),
                                                        attr='environ',
                                                        ctx=Load()),
                                                    attr='get',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='ACCELERATE_MIXED_PRECISION'),
                                                    Constant(value='no')],
                                                keywords=[])),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='deepspeed_plugin',
                                                        ctx=Load()),
                                                    attr='set_mixed_precision',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='mixed_precision', ctx=Load())],
                                                keywords=[])),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='deepspeed_plugin',
                                                        ctx=Load()),
                                                    attr='set_deepspeed_weakref',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]))],
                                    orelse=[])]),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='use_cpu',
                                ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='dataloader_pin_memory',
                                            ctx=Store())],
                                    value=Constant(value=False))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    BoolOp(
                                        op=Or(),
                                        values=[
                                            UnaryOp(
                                                op=Not(),
                                                operand=Call(
                                                    func=Name(id='is_torch_available', ctx=Load()),
                                                    args=[],
                                                    keywords=[])),
                                            Name(id='is_torch_greater_or_equal_than_2_0', ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='dataloader_num_workers',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='dataloader_prefetch_factor',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='--dataloader_prefetch_factor can only be set when data is loaded in a different process, i.e. when --dataloader_num_workers > 1.')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='push_to_hub_token',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='warnings', ctx=Load()),
                                            attr='warn',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='`--push_to_hub_token` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `--hub_token` instead.'),
                                            Name(id='FutureWarning', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='hub_token',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='push_to_hub_token',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='push_to_hub_model_id',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='hub_model_id',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='get_full_repo_name', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='push_to_hub_model_id',
                                                ctx=Load())],
                                        keywords=[
                                            keyword(
                                                arg='organization',
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='push_to_hub_organization',
                                                    ctx=Load())),
                                            keyword(
                                                arg='token',
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='hub_token',
                                                    ctx=Load()))])),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='push_to_hub_organization',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='`--push_to_hub_model_id` and `--push_to_hub_organization` are deprecated and will be removed in version 5 of 🤗 Transformers. Use `--hub_model_id` instead and pass the full repo name to this argument (in this case '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='hub_model_id',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=').')]),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='`--push_to_hub_model_id` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `--hub_model_id` instead and pass the full repo name to this argument (in this case '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='hub_model_id',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=').')]),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[]))])],
                            orelse=[
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='push_to_hub_organization',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='hub_model_id',
                                                    ctx=Store())],
                                            value=JoinedStr(
                                                values=[
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='push_to_hub_organization',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value='/'),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Call(
                                                                func=Name(id='Path', ctx=Load()),
                                                                args=[
                                                                    Attribute(
                                                                        value=Name(id='self', ctx=Load()),
                                                                        attr='output_dir',
                                                                        ctx=Load())],
                                                                keywords=[]),
                                                            attr='name',
                                                            ctx=Load()),
                                                        conversion=-1)])),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='warnings', ctx=Load()),
                                                    attr='warn',
                                                    ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='`--push_to_hub_organization` is deprecated and will be removed in version 5 of 🤗 Transformers. Use `--hub_model_id` instead and pass the full repo name to this argument (in this case '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='hub_model_id',
                                                                    ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=').')]),
                                                    Name(id='FutureWarning', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[])])],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='__str__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='self_as_dict', ctx=Store())],
                            value=Call(
                                func=Name(id='asdict', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load())],
                                keywords=[])),
                        Delete(
                            targets=[
                                Subscript(
                                    value=Name(id='self_as_dict', ctx=Load()),
                                    slice=Constant(value='per_gpu_train_batch_size'),
                                    ctx=Del())]),
                        Delete(
                            targets=[
                                Subscript(
                                    value=Name(id='self_as_dict', ctx=Load()),
                                    slice=Constant(value='per_gpu_eval_batch_size'),
                                    ctx=Del())]),
                        Assign(
                            targets=[
                                Name(id='self_as_dict', ctx=Store())],
                            value=DictComp(
                                key=Name(id='k', ctx=Load()),
                                value=IfExp(
                                    test=Call(
                                        func=Attribute(
                                            value=Name(id='k', ctx=Load()),
                                            attr='endswith',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='_token')],
                                        keywords=[]),
                                    body=JoinedStr(
                                        values=[
                                            Constant(value='<'),
                                            FormattedValue(
                                                value=Call(
                                                    func=Attribute(
                                                        value=Name(id='k', ctx=Load()),
                                                        attr='upper',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value='>')]),
                                    orelse=Name(id='v', ctx=Load())),
                                generators=[
                                    comprehension(
                                        target=Tuple(
                                            elts=[
                                                Name(id='k', ctx=Store()),
                                                Name(id='v', ctx=Store())],
                                            ctx=Store()),
                                        iter=Call(
                                            func=Attribute(
                                                value=Name(id='self_as_dict', ctx=Load()),
                                                attr='items',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        ifs=[],
                                        is_async=0)])),
                        Assign(
                            targets=[
                                Name(id='attrs_as_str', ctx=Store())],
                            value=ListComp(
                                elt=JoinedStr(
                                    values=[
                                        FormattedValue(
                                            value=Name(id='k', ctx=Load()),
                                            conversion=-1),
                                        Constant(value='='),
                                        FormattedValue(
                                            value=Name(id='v', ctx=Load()),
                                            conversion=-1),
                                        Constant(value=',\n')]),
                                generators=[
                                    comprehension(
                                        target=Tuple(
                                            elts=[
                                                Name(id='k', ctx=Store()),
                                                Name(id='v', ctx=Store())],
                                            ctx=Store()),
                                        iter=Call(
                                            func=Name(id='sorted', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Attribute(
                                                        value=Name(id='self_as_dict', ctx=Load()),
                                                        attr='items',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])],
                                            keywords=[]),
                                        ifs=[],
                                        is_async=0)])),
                        Return(
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='__class__',
                                                ctx=Load()),
                                            attr='__name__',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value='(\n'),
                                    FormattedValue(
                                        value=Call(
                                            func=Attribute(
                                                value=Constant(value=''),
                                                attr='join',
                                                ctx=Load()),
                                            args=[
                                                Name(id='attrs_as_str', ctx=Load())],
                                            keywords=[]),
                                        conversion=-1),
                                    Constant(value=')')]))],
                    decorator_list=[],
                    type_params=[]),
                Assign(
                    targets=[
                        Name(id='__repr__', ctx=Store())],
                    value=Name(id='__str__', ctx=Load())),
                FunctionDef(
                    name='train_batch_size',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The actual batch size for training (may differ from `per_gpu_train_batch_size` in distributed training).\n        ')),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='per_gpu_train_batch_size',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='warning',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='Using deprecated `--per_gpu_train_batch_size` argument which will be removed in a future version. Using `--per_device_train_batch_size` is preferred.')],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='per_device_batch_size', ctx=Store())],
                            value=BoolOp(
                                op=Or(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='per_gpu_train_batch_size',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='per_device_train_batch_size',
                                        ctx=Load())])),
                        Assign(
                            targets=[
                                Name(id='train_batch_size', ctx=Store())],
                            value=BinOp(
                                left=Name(id='per_device_batch_size', ctx=Load()),
                                op=Mult(),
                                right=Call(
                                    func=Name(id='max', ctx=Load()),
                                    args=[
                                        Constant(value=1),
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='n_gpu',
                                            ctx=Load())],
                                    keywords=[]))),
                        Return(
                            value=Name(id='train_batch_size', ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='int', ctx=Load()),
                    type_params=[]),
                FunctionDef(
                    name='eval_batch_size',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The actual batch size for evaluation (may differ from `per_gpu_eval_batch_size` in distributed training).\n        ')),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='per_gpu_eval_batch_size',
                                ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='warning',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='Using deprecated `--per_gpu_eval_batch_size` argument which will be removed in a future version. Using `--per_device_eval_batch_size` is preferred.')],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='per_device_batch_size', ctx=Store())],
                            value=BoolOp(
                                op=Or(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='per_gpu_eval_batch_size',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='per_device_eval_batch_size',
                                        ctx=Load())])),
                        Assign(
                            targets=[
                                Name(id='eval_batch_size', ctx=Store())],
                            value=BinOp(
                                left=Name(id='per_device_batch_size', ctx=Load()),
                                op=Mult(),
                                right=Call(
                                    func=Name(id='max', ctx=Load()),
                                    args=[
                                        Constant(value=1),
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='n_gpu',
                                            ctx=Load())],
                                    keywords=[]))),
                        Return(
                            value=Name(id='eval_batch_size', ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='int', ctx=Load()),
                    type_params=[]),
                FunctionDef(
                    name='ddp_timeout_delta',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The actual timeout for torch.distributed.init_process_group since it expects a timedelta variable.\n        ')),
                        Return(
                            value=Call(
                                func=Name(id='timedelta', ctx=Load()),
                                args=[],
                                keywords=[
                                    keyword(
                                        arg='seconds',
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='ddp_timeout',
                                            ctx=Load()))]))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='timedelta', ctx=Load()),
                    type_params=[]),
                FunctionDef(
                    name='_setup_devices',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='logger', ctx=Load()),
                                    attr='info',
                                    ctx=Load()),
                                args=[
                                    Constant(value='PyTorch: setting up devices')],
                                keywords=[])),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                    args=[],
                                    keywords=[])),
                            body=[
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='is_accelerate_available', ctx=Load()),
                                            args=[],
                                            keywords=[])),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ImportError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='Using the `Trainer` with `PyTorch` requires `accelerate>='),
                                                            FormattedValue(
                                                                value=Name(id='ACCELERATE_MIN_VERSION', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='`: Please run `pip install transformers[torch]` or `pip install accelerate -U`')])],
                                                keywords=[]))],
                                    orelse=[]),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='AcceleratorState', ctx=Load()),
                                            attr='_reset_state',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[
                                            keyword(
                                                arg='reset_partial_state',
                                                value=Constant(value=True))]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='distributed_state',
                                    ctx=Store())],
                            value=Constant(value=None)),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    UnaryOp(
                                        op=Not(),
                                        operand=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='use_ipex',
                                            ctx=Load())),
                                    Compare(
                                        left=Constant(value='ACCELERATE_USE_IPEX'),
                                        ops=[
                                            NotIn()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load())])]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='os', ctx=Load()),
                                                attr='environ',
                                                ctx=Load()),
                                            slice=Constant(value='ACCELERATE_USE_IPEX'),
                                            ctx=Store())],
                                    value=Constant(value='false'))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='use_cpu',
                                        ctx=Load()),
                                    Call(
                                        func=Name(id='strtobool', ctx=Load()),
                                        args=[
                                            Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='os', ctx=Load()),
                                                        attr='environ',
                                                        ctx=Load()),
                                                    attr='get',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='ACCELERATE_USE_CPU'),
                                                    Constant(value='False')],
                                                keywords=[])],
                                        keywords=[])]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Store())],
                                    value=Call(
                                        func=Name(id='PartialState', ctx=Load()),
                                        args=[],
                                        keywords=[
                                            keyword(
                                                arg='cpu',
                                                value=Constant(value=True)),
                                            keyword(
                                                arg='backend',
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='ddp_backend',
                                                    ctx=Load()))])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='_n_gpu',
                                            ctx=Store())],
                                    value=Constant(value=0))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='local_rank', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='smp', ctx=Load()),
                                                    attr='local_rank',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='device', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='torch', ctx=Load()),
                                                    attr='device',
                                                    ctx=Load()),
                                                args=[
                                                    Constant(value='cuda'),
                                                    Name(id='local_rank', ctx=Load())],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='_n_gpu',
                                                    ctx=Store())],
                                            value=Constant(value=1)),
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='torch', ctx=Load()),
                                                        attr='cuda',
                                                        ctx=Load()),
                                                    attr='set_device',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='device', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='is_sagemaker_dp_enabled', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='distributed_state',
                                                            ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='PartialState', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='_use_sagemaker_dp',
                                                                value=Constant(value=True))])),
                                                Assign(
                                                    targets=[
                                                        Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='_n_gpu',
                                                            ctx=Store())],
                                                    value=Constant(value=1))],
                                            orelse=[
                                                If(
                                                    test=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='deepspeed',
                                                        ctx=Load()),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Subscript(
                                                                    value=Attribute(
                                                                        value=Name(id='os', ctx=Load()),
                                                                        attr='environ',
                                                                        ctx=Load()),
                                                                    slice=Constant(value='ACCELERATE_USE_DEEPSPEED'),
                                                                    ctx=Store())],
                                                            value=Constant(value='true')),
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='distributed_state',
                                                                    ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='PartialState', ctx=Load()),
                                                                args=[],
                                                                keywords=[
                                                                    keyword(
                                                                        arg='timeout',
                                                                        value=Call(
                                                                            func=Name(id='timedelta', ctx=Load()),
                                                                            args=[],
                                                                            keywords=[
                                                                                keyword(
                                                                                    arg='seconds',
                                                                                    value=Attribute(
                                                                                        value=Name(id='self', ctx=Load()),
                                                                                        attr='ddp_timeout',
                                                                                        ctx=Load()))]))])),
                                                        Delete(
                                                            targets=[
                                                                Subscript(
                                                                    value=Attribute(
                                                                        value=Name(id='os', ctx=Load()),
                                                                        attr='environ',
                                                                        ctx=Load()),
                                                                    slice=Constant(value='ACCELERATE_USE_DEEPSPEED'),
                                                                    ctx=Del())]),
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='_n_gpu',
                                                                    ctx=Store())],
                                                            value=Constant(value=1))],
                                                    orelse=[
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='distributed_state',
                                                                    ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='PartialState', ctx=Load()),
                                                                args=[],
                                                                keywords=[
                                                                    keyword(
                                                                        arg='backend',
                                                                        value=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='ddp_backend',
                                                                            ctx=Load())),
                                                                    keyword(
                                                                        arg='timeout',
                                                                        value=Call(
                                                                            func=Name(id='timedelta', ctx=Load()),
                                                                            args=[],
                                                                            keywords=[
                                                                                keyword(
                                                                                    arg='seconds',
                                                                                    value=Attribute(
                                                                                        value=Name(id='self', ctx=Load()),
                                                                                        attr='ddp_timeout',
                                                                                        ctx=Load()))]))])),
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='_n_gpu',
                                                                    ctx=Store())],
                                                            value=Constant(value=1))])])])]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                    args=[],
                                    keywords=[])),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='device', ctx=Store())],
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='device',
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='local_rank',
                                            ctx=Store())],
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='local_process_index',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='dist', ctx=Load()),
                                            attr='is_available',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Call(
                                        func=Attribute(
                                            value=Name(id='dist', ctx=Load()),
                                            attr='is_initialized',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='parallel_mode',
                                            ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='ParallelMode', ctx=Load()),
                                                attr='DISTRIBUTED',
                                                ctx=Load())])]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='logger', ctx=Load()),
                                            attr='warning',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='torch.distributed process group is initialized, but parallel_mode != ParallelMode.DISTRIBUTED. In order to use Torch DDP, launch your script with `python -m torch.distributed.launch')],
                                        keywords=[]))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='is_torch_xla_available', ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='device', ctx=Store())],
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='device',
                                        ctx=Load())),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='_n_gpu',
                                            ctx=Store())],
                                    value=Constant(value=0))],
                            orelse=[
                                If(
                                    test=BoolOp(
                                        op=Or(),
                                        values=[
                                            Call(
                                                func=Name(id='is_sagemaker_dp_enabled', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            Call(
                                                func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                                args=[],
                                                keywords=[])]),
                                    body=[
                                        Pass()],
                                    orelse=[
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='distributed_state',
                                                        ctx=Load()),
                                                    attr='distributed_type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='DistributedType', ctx=Load()),
                                                        attr='NO',
                                                        ctx=Load())]),
                                            body=[
                                                If(
                                                    test=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='use_mps_device',
                                                        ctx=Load()),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='warnings', ctx=Load()),
                                                                    attr='warn',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Constant(value='`use_mps_device` is deprecated and will be removed in version 5.0 of 🤗 Transformers. `mps` device will be used by default if available similar to the way `cuda` device is used.Therefore, no action from user is required. ')],
                                                                keywords=[])),
                                                        If(
                                                            test=Compare(
                                                                left=Attribute(
                                                                    value=Name(id='device', ctx=Load()),
                                                                    attr='type',
                                                                    ctx=Load()),
                                                                ops=[
                                                                    NotEq()],
                                                                comparators=[
                                                                    Constant(value='mps')]),
                                                            body=[
                                                                Raise(
                                                                    exc=Call(
                                                                        func=Name(id='ValueError', ctx=Load()),
                                                                        args=[
                                                                            Constant(value='Either you do not have an MPS-enabled device on this machine or MacOS version is not 12.3+ or current PyTorch install was not built with MPS enabled.')],
                                                                        keywords=[]))],
                                                            orelse=[])],
                                                    orelse=[]),
                                                If(
                                                    test=Compare(
                                                        left=Attribute(
                                                            value=Name(id='device', ctx=Load()),
                                                            attr='type',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value='mps')]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='_n_gpu',
                                                                    ctx=Store())],
                                                            value=Constant(value=1))],
                                                    orelse=[
                                                        If(
                                                            test=Attribute(
                                                                value=Name(id='self', ctx=Load()),
                                                                attr='use_cpu',
                                                                ctx=Load()),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Name(id='device', ctx=Store())],
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='torch', ctx=Load()),
                                                                            attr='device',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Constant(value='cpu')],
                                                                        keywords=[])),
                                                                Assign(
                                                                    targets=[
                                                                        Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='_n_gpu',
                                                                            ctx=Store())],
                                                                    value=Constant(value=0))],
                                                            orelse=[
                                                                If(
                                                                    test=Call(
                                                                        func=Name(id='is_torch_xpu_available', ctx=Load()),
                                                                        args=[],
                                                                        keywords=[]),
                                                                    body=[
                                                                        Assign(
                                                                            targets=[
                                                                                Name(id='device', ctx=Store())],
                                                                            value=Call(
                                                                                func=Attribute(
                                                                                    value=Name(id='torch', ctx=Load()),
                                                                                    attr='device',
                                                                                    ctx=Load()),
                                                                                args=[
                                                                                    Constant(value='xpu:0')],
                                                                                keywords=[])),
                                                                        Expr(
                                                                            value=Call(
                                                                                func=Attribute(
                                                                                    value=Attribute(
                                                                                        value=Name(id='torch', ctx=Load()),
                                                                                        attr='xpu',
                                                                                        ctx=Load()),
                                                                                    attr='set_device',
                                                                                    ctx=Load()),
                                                                                args=[
                                                                                    Name(id='device', ctx=Load())],
                                                                                keywords=[])),
                                                                        Assign(
                                                                            targets=[
                                                                                Attribute(
                                                                                    value=Name(id='self', ctx=Load()),
                                                                                    attr='_n_gpu',
                                                                                    ctx=Store())],
                                                                            value=Constant(value=1))],
                                                                    orelse=[
                                                                        If(
                                                                            test=Call(
                                                                                func=Name(id='is_torch_mlu_available', ctx=Load()),
                                                                                args=[],
                                                                                keywords=[]),
                                                                            body=[
                                                                                Assign(
                                                                                    targets=[
                                                                                        Name(id='device', ctx=Store())],
                                                                                    value=Call(
                                                                                        func=Attribute(
                                                                                            value=Name(id='torch', ctx=Load()),
                                                                                            attr='device',
                                                                                            ctx=Load()),
                                                                                        args=[
                                                                                            Constant(value='mlu:0')],
                                                                                        keywords=[])),
                                                                                Expr(
                                                                                    value=Call(
                                                                                        func=Attribute(
                                                                                            value=Attribute(
                                                                                                value=Name(id='torch', ctx=Load()),
                                                                                                attr='mlu',
                                                                                                ctx=Load()),
                                                                                            attr='set_device',
                                                                                            ctx=Load()),
                                                                                        args=[
                                                                                            Name(id='device', ctx=Load())],
                                                                                        keywords=[])),
                                                                                Assign(
                                                                                    targets=[
                                                                                        Attribute(
                                                                                            value=Name(id='self', ctx=Load()),
                                                                                            attr='_n_gpu',
                                                                                            ctx=Store())],
                                                                                    value=Constant(value=1))],
                                                                            orelse=[
                                                                                If(
                                                                                    test=Call(
                                                                                        func=Name(id='is_torch_npu_available', ctx=Load()),
                                                                                        args=[],
                                                                                        keywords=[]),
                                                                                    body=[
                                                                                        Assign(
                                                                                            targets=[
                                                                                                Name(id='device', ctx=Store())],
                                                                                            value=Call(
                                                                                                func=Attribute(
                                                                                                    value=Name(id='torch', ctx=Load()),
                                                                                                    attr='device',
                                                                                                    ctx=Load()),
                                                                                                args=[
                                                                                                    Constant(value='npu:0')],
                                                                                                keywords=[])),
                                                                                        Expr(
                                                                                            value=Call(
                                                                                                func=Attribute(
                                                                                                    value=Attribute(
                                                                                                        value=Name(id='torch', ctx=Load()),
                                                                                                        attr='npu',
                                                                                                        ctx=Load()),
                                                                                                    attr='set_device',
                                                                                                    ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='device', ctx=Load())],
                                                                                                keywords=[])),
                                                                                        Assign(
                                                                                            targets=[
                                                                                                Attribute(
                                                                                                    value=Name(id='self', ctx=Load()),
                                                                                                    attr='_n_gpu',
                                                                                                    ctx=Store())],
                                                                                            value=Constant(value=1))],
                                                                                    orelse=[
                                                                                        Assign(
                                                                                            targets=[
                                                                                                Name(id='device', ctx=Store())],
                                                                                            value=Call(
                                                                                                func=Attribute(
                                                                                                    value=Name(id='torch', ctx=Load()),
                                                                                                    attr='device',
                                                                                                    ctx=Load()),
                                                                                                args=[
                                                                                                    IfExp(
                                                                                                        test=Call(
                                                                                                            func=Attribute(
                                                                                                                value=Attribute(
                                                                                                                    value=Name(id='torch', ctx=Load()),
                                                                                                                    attr='cuda',
                                                                                                                    ctx=Load()),
                                                                                                                attr='is_available',
                                                                                                                ctx=Load()),
                                                                                                            args=[],
                                                                                                            keywords=[]),
                                                                                                        body=Constant(value='cuda:0'),
                                                                                                        orelse=Constant(value='cpu'))],
                                                                                                keywords=[])),
                                                                                        Assign(
                                                                                            targets=[
                                                                                                Attribute(
                                                                                                    value=Name(id='self', ctx=Load()),
                                                                                                    attr='_n_gpu',
                                                                                                    ctx=Store())],
                                                                                            value=Call(
                                                                                                func=Attribute(
                                                                                                    value=Attribute(
                                                                                                        value=Name(id='torch', ctx=Load()),
                                                                                                        attr='cuda',
                                                                                                        ctx=Load()),
                                                                                                    attr='device_count',
                                                                                                    ctx=Load()),
                                                                                                args=[],
                                                                                                keywords=[])),
                                                                                        If(
                                                                                            test=Compare(
                                                                                                left=Attribute(
                                                                                                    value=Name(id='device', ctx=Load()),
                                                                                                    attr='type',
                                                                                                    ctx=Load()),
                                                                                                ops=[
                                                                                                    Eq()],
                                                                                                comparators=[
                                                                                                    Constant(value='cuda')]),
                                                                                            body=[
                                                                                                Expr(
                                                                                                    value=Call(
                                                                                                        func=Attribute(
                                                                                                            value=Attribute(
                                                                                                                value=Name(id='torch', ctx=Load()),
                                                                                                                attr='cuda',
                                                                                                                ctx=Load()),
                                                                                                            attr='set_device',
                                                                                                            ctx=Load()),
                                                                                                        args=[
                                                                                                            Name(id='device', ctx=Load())],
                                                                                                        keywords=[]))],
                                                                                            orelse=[])])])])])])],
                                            orelse=[])])]),
                        Return(
                            value=Name(id='device', ctx=Load()))],
                    decorator_list=[
                        Name(id='cached_property', ctx=Load())],
                    returns=Constant(value='torch.device'),
                    type_params=[]),
                FunctionDef(
                    name='device',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The device used by this process.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        Return(
                            value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='_setup_devices',
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Constant(value='torch.device'),
                    type_params=[]),
                FunctionDef(
                    name='n_gpu',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The number of GPUs used by this process.\n\n        Note:\n            This will only be greater than one when you have multiple GPUs available but are not using distributed\n            training. For distributed training, it will always be 1.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='hasattr', ctx=Load()),
                                    args=[
                                        Name(id='self', ctx=Load()),
                                        Constant(value='_n_gpu')],
                                    keywords=[])),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='_', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='_setup_devices',
                                        ctx=Load()))],
                            orelse=[]),
                        Return(
                            value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='_n_gpu',
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='parallel_mode',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The current mode used for parallelism if multiple GPUs/TPU cores are available. One of:\n\n        - `ParallelMode.NOT_PARALLEL`: no parallelism (CPU or one GPU).\n        - `ParallelMode.NOT_DISTRIBUTED`: several GPUs in one single process (uses `torch.nn.DataParallel`).\n        - `ParallelMode.DISTRIBUTED`: several GPUs, each having its own process (uses\n          `torch.nn.DistributedDataParallel`).\n        - `ParallelMode.TPU`: several TPU cores.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Call(
                                func=Name(id='is_torch_xla_available', ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Name(id='ParallelMode', ctx=Load()),
                                        attr='TPU',
                                        ctx=Load()))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Attribute(
                                                value=Name(id='ParallelMode', ctx=Load()),
                                                attr='SAGEMAKER_MODEL_PARALLEL',
                                                ctx=Load()))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='is_sagemaker_dp_enabled', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            body=[
                                                Return(
                                                    value=Attribute(
                                                        value=Name(id='ParallelMode', ctx=Load()),
                                                        attr='SAGEMAKER_DATA_PARALLEL',
                                                        ctx=Load()))],
                                            orelse=[
                                                If(
                                                    test=BoolOp(
                                                        op=Or(),
                                                        values=[
                                                            BoolOp(
                                                                op=And(),
                                                                values=[
                                                                    Compare(
                                                                        left=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='distributed_state',
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            IsNot()],
                                                                        comparators=[
                                                                            Constant(value=None)]),
                                                                    Compare(
                                                                        left=Attribute(
                                                                            value=Attribute(
                                                                                value=Name(id='self', ctx=Load()),
                                                                                attr='distributed_state',
                                                                                ctx=Load()),
                                                                            attr='distributed_type',
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            NotEq()],
                                                                        comparators=[
                                                                            Attribute(
                                                                                value=Name(id='DistributedType', ctx=Load()),
                                                                                attr='NO',
                                                                                ctx=Load())])]),
                                                            BoolOp(
                                                                op=And(),
                                                                values=[
                                                                    Compare(
                                                                        left=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='distributed_state',
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            Is()],
                                                                        comparators=[
                                                                            Constant(value=None)]),
                                                                    Compare(
                                                                        left=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='local_rank',
                                                                            ctx=Load()),
                                                                        ops=[
                                                                            NotEq()],
                                                                        comparators=[
                                                                            UnaryOp(
                                                                                op=USub(),
                                                                                operand=Constant(value=1))])])]),
                                                    body=[
                                                        Return(
                                                            value=Attribute(
                                                                value=Name(id='ParallelMode', ctx=Load()),
                                                                attr='DISTRIBUTED',
                                                                ctx=Load()))],
                                                    orelse=[
                                                        If(
                                                            test=Compare(
                                                                left=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='n_gpu',
                                                                    ctx=Load()),
                                                                ops=[
                                                                    Gt()],
                                                                comparators=[
                                                                    Constant(value=1)]),
                                                            body=[
                                                                Return(
                                                                    value=Attribute(
                                                                        value=Name(id='ParallelMode', ctx=Load()),
                                                                        attr='NOT_DISTRIBUTED',
                                                                        ctx=Load()))],
                                                            orelse=[
                                                                Return(
                                                                    value=Attribute(
                                                                        value=Name(id='ParallelMode', ctx=Load()),
                                                                        attr='NOT_PARALLEL',
                                                                        ctx=Load()))])])])])])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='world_size',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The number of processes used in parallel.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='distributed_state',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='num_processes',
                                        ctx=Load()))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=IfExp(
                                                test=UnaryOp(
                                                    op=Not(),
                                                    operand=Attribute(
                                                        value=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='smp', ctx=Load()),
                                                                attr='state',
                                                                ctx=Load()),
                                                            attr='cfg',
                                                            ctx=Load()),
                                                        attr='prescaled_batch',
                                                        ctx=Load())),
                                                body=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='dp_size',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                orelse=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='rdp_size',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])))],
                                    orelse=[])]),
                        Return(
                            value=Constant(value=1))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='process_index',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The index of the current process used.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='distributed_state',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='process_index',
                                        ctx=Load()))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=IfExp(
                                                test=UnaryOp(
                                                    op=Not(),
                                                    operand=Attribute(
                                                        value=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='smp', ctx=Load()),
                                                                attr='state',
                                                                ctx=Load()),
                                                            attr='cfg',
                                                            ctx=Load()),
                                                        attr='prescaled_batch',
                                                        ctx=Load())),
                                                body=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='dp_rank',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                orelse=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='rdp_rank',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])))],
                                    orelse=[])]),
                        Return(
                            value=Constant(value=0))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='local_process_index',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        The index of the local process used.\n        ')),
                        Expr(
                            value=Call(
                                func=Name(id='requires_backends', ctx=Load()),
                                args=[
                                    Name(id='self', ctx=Load()),
                                    List(
                                        elts=[
                                            Constant(value='torch')],
                                        ctx=Load())],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='distributed_state',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        attr='local_process_index',
                                        ctx=Load()))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='smp', ctx=Load()),
                                                    attr='local_rank',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]))],
                                    orelse=[])]),
                        Return(
                            value=Constant(value=0))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='should_log',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Whether or not the current process should produce log.\n        ')),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='log_on_each_node',
                                ctx=Load()),
                            body=[
                                Return(
                                    value=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='local_process_index',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='rank',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=0)]))],
                                    orelse=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='process_index',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=0)]))])])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='should_save',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Whether or not the current process should write to disk, e.g., to save models and checkpoints.\n        ')),
                        If(
                            test=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='save_on_each_node',
                                ctx=Load()),
                            body=[
                                Return(
                                    value=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='local_process_index',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='smp', ctx=Load()),
                                                        attr='rank',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[]),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=0)]))],
                                    orelse=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='process_index',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=0)]))])])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='get_process_log_level',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value="\n        Returns the log level to be used depending on whether this process is the main process of node 0, main process\n        of node non-0, or a non-main process.\n\n        For the main process the log level defaults to the logging level set (`logging.WARNING` if you didn't do\n        anything) unless overridden by `log_level` argument.\n\n        For the replica processes the log level defaults to `logging.WARNING` unless overridden by `log_level_replica`\n        argument.\n\n        The choice between the main and replica process settings is made according to the return value of `should_log`.\n        ")),
                        Assign(
                            targets=[
                                Name(id='log_level', ctx=Store())],
                            value=Subscript(
                                value=Name(id='trainer_log_levels', ctx=Load()),
                                slice=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='log_level',
                                    ctx=Load()),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='log_level_replica', ctx=Store())],
                            value=Subscript(
                                value=Name(id='trainer_log_levels', ctx=Load()),
                                slice=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='log_level_replica',
                                    ctx=Load()),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='log_level_main_node', ctx=Store())],
                            value=IfExp(
                                test=Compare(
                                    left=Name(id='log_level', ctx=Load()),
                                    ops=[
                                        Eq()],
                                    comparators=[
                                        UnaryOp(
                                            op=USub(),
                                            operand=Constant(value=1))]),
                                body=Call(
                                    func=Attribute(
                                        value=Name(id='logging', ctx=Load()),
                                        attr='get_verbosity',
                                        ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                orelse=Name(id='log_level', ctx=Load()))),
                        Assign(
                            targets=[
                                Name(id='log_level_replica_node', ctx=Store())],
                            value=IfExp(
                                test=Compare(
                                    left=Name(id='log_level_replica', ctx=Load()),
                                    ops=[
                                        Eq()],
                                    comparators=[
                                        UnaryOp(
                                            op=USub(),
                                            operand=Constant(value=1))]),
                                body=Call(
                                    func=Attribute(
                                        value=Name(id='logging', ctx=Load()),
                                        attr='get_verbosity',
                                        ctx=Load()),
                                    args=[],
                                    keywords=[]),
                                orelse=Name(id='log_level_replica', ctx=Load()))),
                        Return(
                            value=IfExp(
                                test=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='should_log',
                                    ctx=Load()),
                                body=Name(id='log_level_main_node', ctx=Load()),
                                orelse=Name(id='log_level_replica_node', ctx=Load())))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='place_model_on_device',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Can be subclassed and overridden for some specific integrations.\n        ')),
                        Return(
                            value=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                    args=[],
                                    keywords=[])))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='_no_sync_in_gradient_accumulation',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Whether or not to use no_sync for the gradients when doing gradient accumulation.\n        ')),
                        Return(
                            value=UnaryOp(
                                op=Not(),
                                operand=BoolOp(
                                    op=Or(),
                                    values=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='deepspeed',
                                            ctx=Load()),
                                        Call(
                                            func=Name(id='is_sagemaker_dp_enabled', ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        Call(
                                            func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        Call(
                                            func=Name(id='is_torch_neuroncore_available', ctx=Load()),
                                            args=[],
                                            keywords=[])])))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='main_process_first',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='local'),
                            arg(arg='desc')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=True),
                            Constant(value='work')]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A context manager for torch distributed environment where on needs to do something on the main process, while\n        blocking replicas, and when it\'s finished releasing the replicas.\n\n        One such use is for `datasets`\'s `map` feature which to be efficient should be run once on the main process,\n        which upon completion saves a cached version of results and which then automatically gets loaded by the\n        replicas.\n\n        Args:\n            local (`bool`, *optional*, defaults to `True`):\n                if `True` first means process of rank 0 of each node if `False` first means process of rank 0 of node\n                rank 0 In multi-node environment with a shared filesystem you most likely will want to use\n                `local=False` so that only the main process of the first node will do the processing. If however, the\n                filesystem is not shared, then the main process of each node will need to do the processing, which is\n                the default behavior.\n            desc (`str`, *optional*, defaults to `"work"`):\n                a work description to be used in debug logs\n\n        ')),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Call(
                                        func=Name(id='is_torch_available', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='world_size',
                                            ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Constant(value=1)])]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='main_process_desc', ctx=Store())],
                                    value=IfExp(
                                        test=Name(id='local', ctx=Load()),
                                        body=Constant(value='main local process'),
                                        orelse=Constant(value='main process'))),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='distributed_state',
                                            ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='is_main_process', ctx=Store())],
                                            value=IfExp(
                                                test=Name(id='local', ctx=Load()),
                                                body=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='distributed_state',
                                                        ctx=Load()),
                                                    attr='is_local_main_process',
                                                    ctx=Load()),
                                                orelse=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='distributed_state',
                                                        ctx=Load()),
                                                    attr='is_main_process',
                                                    ctx=Load())))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='is_sagemaker_mp_enabled', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='is_main_process', ctx=Store())],
                                                    value=Compare(
                                                        left=Call(
                                                            func=Attribute(
                                                                value=Name(id='smp', ctx=Load()),
                                                                attr='rank',
                                                                ctx=Load()),
                                                            args=[],
                                                            keywords=[]),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=0)]))],
                                            orelse=[])]),
                                Try(
                                    body=[
                                        If(
                                            test=UnaryOp(
                                                op=Not(),
                                                operand=Name(id='is_main_process', ctx=Load())),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='logger', ctx=Load()),
                                                            attr='debug',
                                                            ctx=Load()),
                                                        args=[
                                                            JoinedStr(
                                                                values=[
                                                                    FormattedValue(
                                                                        value=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='process_index',
                                                                            ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=': waiting for the '),
                                                                    FormattedValue(
                                                                        value=Name(id='main_process_desc', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=' to perform '),
                                                                    FormattedValue(
                                                                        value=Name(id='desc', ctx=Load()),
                                                                        conversion=-1)])],
                                                        keywords=[])),
                                                If(
                                                    test=Call(
                                                        func=Name(id='is_torch_xla_available', ctx=Load()),
                                                        args=[],
                                                        keywords=[]),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='xm', ctx=Load()),
                                                                    attr='rendezvous',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='desc', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='dist', ctx=Load()),
                                                                    attr='barrier',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]))])],
                                            orelse=[]),
                                        Expr(value=Yield())],
                                    handlers=[],
                                    orelse=[],
                                    finalbody=[
                                        If(
                                            test=Name(id='is_main_process', ctx=Load()),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='logger', ctx=Load()),
                                                            attr='debug',
                                                            ctx=Load()),
                                                        args=[
                                                            JoinedStr(
                                                                values=[
                                                                    FormattedValue(
                                                                        value=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='process_index',
                                                                            ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=': '),
                                                                    FormattedValue(
                                                                        value=Name(id='main_process_desc', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=' completed '),
                                                                    FormattedValue(
                                                                        value=Name(id='desc', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=', releasing all replicas')])],
                                                        keywords=[])),
                                                If(
                                                    test=Call(
                                                        func=Name(id='is_torch_xla_available', ctx=Load()),
                                                        args=[],
                                                        keywords=[]),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='xm', ctx=Load()),
                                                                    attr='rendezvous',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='desc', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='dist', ctx=Load()),
                                                                    attr='barrier',
                                                                    ctx=Load()),
                                                                args=[],
                                                                keywords=[]))])],
                                            orelse=[])])],
                            orelse=[
                                Expr(value=Yield())])],
                    decorator_list=[
                        Attribute(
                            value=Name(id='contextlib', ctx=Load()),
                            attr='contextmanager',
                            ctx=Load())],
                    type_params=[]),
                FunctionDef(
                    name='get_warmup_steps',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='num_training_steps',
                                annotation=Name(id='int', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Get number of steps used for a linear warmup.\n        ')),
                        Assign(
                            targets=[
                                Name(id='warmup_steps', ctx=Store())],
                            value=IfExp(
                                test=Compare(
                                    left=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='warmup_steps',
                                        ctx=Load()),
                                    ops=[
                                        Gt()],
                                    comparators=[
                                        Constant(value=0)]),
                                body=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='warmup_steps',
                                    ctx=Load()),
                                orelse=Call(
                                    func=Attribute(
                                        value=Name(id='math', ctx=Load()),
                                        attr='ceil',
                                        ctx=Load()),
                                    args=[
                                        BinOp(
                                            left=Name(id='num_training_steps', ctx=Load()),
                                            op=Mult(),
                                            right=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='warmup_ratio',
                                                ctx=Load()))],
                                    keywords=[]))),
                        Return(
                            value=Name(id='warmup_steps', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='to_dict',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\n        the token values by removing their value.\n        ')),
                        Assign(
                            targets=[
                                Name(id='d', ctx=Store())],
                            value=DictComp(
                                key=Attribute(
                                    value=Name(id='field', ctx=Load()),
                                    attr='name',
                                    ctx=Load()),
                                value=Call(
                                    func=Name(id='getattr', ctx=Load()),
                                    args=[
                                        Name(id='self', ctx=Load()),
                                        Attribute(
                                            value=Name(id='field', ctx=Load()),
                                            attr='name',
                                            ctx=Load())],
                                    keywords=[]),
                                generators=[
                                    comprehension(
                                        target=Name(id='field', ctx=Store()),
                                        iter=Call(
                                            func=Name(id='fields', ctx=Load()),
                                            args=[
                                                Name(id='self', ctx=Load())],
                                            keywords=[]),
                                        ifs=[
                                            Attribute(
                                                value=Name(id='field', ctx=Load()),
                                                attr='init',
                                                ctx=Load())],
                                        is_async=0)])),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='k', ctx=Store()),
                                    Name(id='v', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Attribute(
                                    value=Name(id='d', ctx=Load()),
                                    attr='items',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='v', ctx=Load()),
                                            Name(id='Enum', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='d', ctx=Load()),
                                                    slice=Name(id='k', ctx=Load()),
                                                    ctx=Store())],
                                            value=Attribute(
                                                value=Name(id='v', ctx=Load()),
                                                attr='value',
                                                ctx=Load()))],
                                    orelse=[]),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='v', ctx=Load()),
                                                    Name(id='list', ctx=Load())],
                                                keywords=[]),
                                            Compare(
                                                left=Call(
                                                    func=Name(id='len', ctx=Load()),
                                                    args=[
                                                        Name(id='v', ctx=Load())],
                                                    keywords=[]),
                                                ops=[
                                                    Gt()],
                                                comparators=[
                                                    Constant(value=0)]),
                                            Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Subscript(
                                                        value=Name(id='v', ctx=Load()),
                                                        slice=Constant(value=0),
                                                        ctx=Load()),
                                                    Name(id='Enum', ctx=Load())],
                                                keywords=[])]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='d', ctx=Load()),
                                                    slice=Name(id='k', ctx=Load()),
                                                    ctx=Store())],
                                            value=ListComp(
                                                elt=Attribute(
                                                    value=Name(id='x', ctx=Load()),
                                                    attr='value',
                                                    ctx=Load()),
                                                generators=[
                                                    comprehension(
                                                        target=Name(id='x', ctx=Store()),
                                                        iter=Name(id='v', ctx=Load()),
                                                        ifs=[],
                                                        is_async=0)]))],
                                    orelse=[]),
                                If(
                                    test=Call(
                                        func=Attribute(
                                            value=Name(id='k', ctx=Load()),
                                            attr='endswith',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='_token')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='d', ctx=Load()),
                                                    slice=Name(id='k', ctx=Load()),
                                                    ctx=Store())],
                                            value=JoinedStr(
                                                values=[
                                                    Constant(value='<'),
                                                    FormattedValue(
                                                        value=Call(
                                                            func=Attribute(
                                                                value=Name(id='k', ctx=Load()),
                                                                attr='upper',
                                                                ctx=Load()),
                                                            args=[],
                                                            keywords=[]),
                                                        conversion=-1),
                                                    Constant(value='>')]))],
                                    orelse=[]),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Call(
                                                func=Name(id='is_accelerate_available', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='v', ctx=Load()),
                                                    Name(id='AcceleratorConfig', ctx=Load())],
                                                keywords=[])]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='d', ctx=Load()),
                                                    slice=Name(id='k', ctx=Load()),
                                                    ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='v', ctx=Load()),
                                                    attr='to_dict',
                                                    ctx=Load()),
                                                args=[],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        Return(
                            value=Name(id='d', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='to_json_string',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Serializes this instance to a JSON string.\n        ')),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='json', ctx=Load()),
                                    attr='dumps',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='to_dict',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[
                                    keyword(
                                        arg='indent',
                                        value=Constant(value=2))]))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='to_sanitized_dict',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Sanitized serialization to use with TensorBoard’s hparams\n        ')),
                        Assign(
                            targets=[
                                Name(id='d', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='to_dict',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='d', ctx=Store())],
                            value=Dict(
                                keys=[
                                    None,
                                    None],
                                values=[
                                    Name(id='d', ctx=Load()),
                                    Dict(
                                        keys=[
                                            Constant(value='train_batch_size'),
                                            Constant(value='eval_batch_size')],
                                        values=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='train_batch_size',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='eval_batch_size',
                                                ctx=Load())])])),
                        Assign(
                            targets=[
                                Name(id='valid_types', ctx=Store())],
                            value=List(
                                elts=[
                                    Name(id='bool', ctx=Load()),
                                    Name(id='int', ctx=Load()),
                                    Name(id='float', ctx=Load()),
                                    Name(id='str', ctx=Load())],
                                ctx=Load())),
                        If(
                            test=Call(
                                func=Name(id='is_torch_available', ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='valid_types', ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='torch', ctx=Load()),
                                                attr='Tensor',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=DictComp(
                                key=Name(id='k', ctx=Load()),
                                value=IfExp(
                                    test=Compare(
                                        left=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='v', ctx=Load())],
                                            keywords=[]),
                                        ops=[
                                            In()],
                                        comparators=[
                                            Name(id='valid_types', ctx=Load())]),
                                    body=Name(id='v', ctx=Load()),
                                    orelse=Call(
                                        func=Name(id='str', ctx=Load()),
                                        args=[
                                            Name(id='v', ctx=Load())],
                                        keywords=[])),
                                generators=[
                                    comprehension(
                                        target=Tuple(
                                            elts=[
                                                Name(id='k', ctx=Store()),
                                                Name(id='v', ctx=Store())],
                                            ctx=Store()),
                                        iter=Call(
                                            func=Attribute(
                                                value=Name(id='d', ctx=Load()),
                                                attr='items',
                                                ctx=Load()),
                                            args=[],
                                            keywords=[]),
                                        ifs=[],
                                        is_async=0)]))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Dict', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='str', ctx=Load()),
                                Name(id='Any', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    type_params=[]),
                FunctionDef(
                    name='set_training',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='learning_rate',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='batch_size',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='weight_decay',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='num_epochs',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='max_steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='gradient_accumulation_steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='seed',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='gradient_checkpointing',
                                annotation=Name(id='bool', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=5e-05),
                            Constant(value=8),
                            Constant(value=0),
                            Constant(value=3),
                            UnaryOp(
                                op=USub(),
                                operand=Constant(value=1)),
                            Constant(value=1),
                            Constant(value=42),
                            Constant(value=False)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all basic arguments linked to the training.\n\n        <Tip>\n\n        Calling this method will automatically set `self.do_train` to `True`.\n\n        </Tip>\n\n        Args:\n            learning_rate (`float`, *optional*, defaults to 5e-5):\n                The initial learning rate for the optimizer.\n            batch_size (`int` *optional*, defaults to 8):\n                The batch size per device (GPU/TPU core/CPU...) used for training.\n            weight_decay (`float`, *optional*, defaults to 0):\n                The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in the\n                optimizer.\n            num_train_epochs(`float`, *optional*, defaults to 3.0):\n                Total number of training epochs to perform (if not an integer, will perform the decimal part percents\n                of the last epoch before stopping training).\n            max_steps (`int`, *optional*, defaults to -1):\n                If set to a positive number, the total number of training steps to perform. Overrides `num_train_epochs`.\n                For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until\n                `max_steps` is reached.\n            gradient_accumulation_steps (`int`, *optional*, defaults to 1):\n                Number of updates steps to accumulate the gradients for, before performing a backward/update pass.\n\n                <Tip warning={true}>\n\n                When using gradient accumulation, one step is counted as one step with backward pass. Therefore,\n                logging, evaluation, save will be conducted every `gradient_accumulation_steps * xxx_step` training\n                examples.\n\n                </Tip>\n\n            seed (`int`, *optional*, defaults to 42):\n                Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use\n                the [`~Trainer.model_init`] function to instantiate the model if it has some randomly initialized\n                parameters.\n            gradient_checkpointing (`bool`, *optional*, defaults to `False`):\n                If True, use gradient checkpointing to save memory at the expense of slower backward pass.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_training(learning_rate=1e-4, batch_size=32)\n        >>> args.learning_rate\n        1e-4\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='do_train',
                                    ctx=Store())],
                            value=Constant(value=True)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='learning_rate',
                                    ctx=Store())],
                            value=Name(id='learning_rate', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='per_device_train_batch_size',
                                    ctx=Store())],
                            value=Name(id='batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='weight_decay',
                                    ctx=Store())],
                            value=Name(id='weight_decay', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='num_train_epochs',
                                    ctx=Store())],
                            value=Name(id='num_epochs', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='max_steps',
                                    ctx=Store())],
                            value=Name(id='max_steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='gradient_accumulation_steps',
                                    ctx=Store())],
                            value=Name(id='gradient_accumulation_steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='seed',
                                    ctx=Store())],
                            value=Name(id='seed', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='gradient_checkpointing',
                                    ctx=Store())],
                            value=Name(id='gradient_checkpointing', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_evaluate',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='strategy',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='IntervalStrategy', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='batch_size',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='accumulation_steps',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='int', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='delay',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='float', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='loss_only',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='jit_mode',
                                annotation=Name(id='bool', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='no'),
                            Constant(value=500),
                            Constant(value=8),
                            Constant(value=None),
                            Constant(value=None),
                            Constant(value=False),
                            Constant(value=False)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to evaluation.\n\n        Args:\n            strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"no"`):\n                The evaluation strategy to adopt during training. Possible values are:\n\n                    - `"no"`: No evaluation is done during training.\n                    - `"steps"`: Evaluation is done (and logged) every `steps`.\n                    - `"epoch"`: Evaluation is done at the end of each epoch.\n\n                Setting a `strategy` different from `"no"` will set `self.do_eval` to `True`.\n            steps (`int`, *optional*, defaults to 500):\n                Number of update steps between two evaluations if `strategy="steps"`.\n            batch_size (`int` *optional*, defaults to 8):\n                The batch size per device (GPU/TPU core/CPU...) used for evaluation.\n            accumulation_steps (`int`, *optional*):\n                Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU.\n                If left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster\n                but requires more memory).\n            delay (`float`, *optional*):\n                Number of epochs or steps to wait for before the first evaluation can be performed, depending on the\n                eval_strategy.\n            loss_only (`bool`, *optional*, defaults to `False`):\n                Ignores all outputs except the loss.\n            jit_mode (`bool`, *optional*):\n                Whether or not to use PyTorch jit trace for inference.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_evaluate(strategy="steps", steps=100)\n        >>> args.eval_steps\n        100\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Name(id='strategy', ctx=Load())],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='eval_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Name(id='steps', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value="Setting `strategy` as 'steps' requires a positive value for `steps`.")],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='do_eval',
                                    ctx=Store())],
                            value=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_strategy',
                                    ctx=Load()),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='IntervalStrategy', ctx=Load()),
                                        attr='NO',
                                        ctx=Load())])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_steps',
                                    ctx=Store())],
                            value=Name(id='steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='per_device_eval_batch_size',
                                    ctx=Store())],
                            value=Name(id='batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_accumulation_steps',
                                    ctx=Store())],
                            value=Name(id='accumulation_steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='eval_delay',
                                    ctx=Store())],
                            value=Name(id='delay', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='prediction_loss_only',
                                    ctx=Store())],
                            value=Name(id='loss_only', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='jit_mode_eval',
                                    ctx=Store())],
                            value=Name(id='jit_mode', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_testing',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='batch_size',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='loss_only',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='jit_mode',
                                annotation=Name(id='bool', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=8),
                            Constant(value=False),
                            Constant(value=False)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all basic arguments linked to testing on a held-out dataset.\n\n        <Tip>\n\n        Calling this method will automatically set `self.do_predict` to `True`.\n\n        </Tip>\n\n        Args:\n            batch_size (`int` *optional*, defaults to 8):\n                The batch size per device (GPU/TPU core/CPU...) used for testing.\n            loss_only (`bool`, *optional*, defaults to `False`):\n                Ignores all outputs except the loss.\n            jit_mode (`bool`, *optional*):\n                Whether or not to use PyTorch jit trace for inference.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_testing(batch_size=32)\n        >>> args.per_device_eval_batch_size\n        32\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='do_predict',
                                    ctx=Store())],
                            value=Constant(value=True)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='per_device_eval_batch_size',
                                    ctx=Store())],
                            value=Name(id='batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='prediction_loss_only',
                                    ctx=Store())],
                            value=Name(id='loss_only', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='jit_mode_eval',
                                    ctx=Store())],
                            value=Name(id='jit_mode', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_save',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='strategy',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='IntervalStrategy', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='total_limit',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='int', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='on_each_node',
                                annotation=Name(id='bool', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='steps'),
                            Constant(value=500),
                            Constant(value=None),
                            Constant(value=False)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to checkpoint saving.\n\n        Args:\n            strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"steps"`):\n                The checkpoint save strategy to adopt during training. Possible values are:\n\n                    - `"no"`: No save is done during training.\n                    - `"epoch"`: Save is done at the end of each epoch.\n                    - `"steps"`: Save is done every `save_steps`.\n\n            steps (`int`, *optional*, defaults to 500):\n                Number of updates steps before two checkpoint saves if `strategy="steps"`.\n            total_limit (`int`, *optional*):\n                If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in\n                `output_dir`.\n            on_each_node (`bool`, *optional*, defaults to `False`):\n                When doing multi-node distributed training, whether to save models and checkpoints on each node, or\n                only on the main one.\n\n                This should not be activated when the different nodes use the same storage as the files will be saved\n                with the same names for each node.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_save(strategy="steps", steps=100)\n        >>> args.save_steps\n        100\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='save_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Name(id='strategy', ctx=Load())],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='save_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Name(id='steps', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value="Setting `strategy` as 'steps' requires a positive value for `steps`.")],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='save_steps',
                                    ctx=Store())],
                            value=Name(id='steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='save_total_limit',
                                    ctx=Store())],
                            value=Name(id='total_limit', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='save_on_each_node',
                                    ctx=Store())],
                            value=Name(id='on_each_node', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_logging',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='strategy',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='IntervalStrategy', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='report_to',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Subscript(
                                                value=Name(id='List', ctx=Load()),
                                                slice=Name(id='str', ctx=Load()),
                                                ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='level',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='first_step',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='nan_inf_filter',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='on_each_node',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='replica_level',
                                annotation=Name(id='str', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='steps'),
                            Constant(value=500),
                            Constant(value='none'),
                            Constant(value='passive'),
                            Constant(value=False),
                            Constant(value=False),
                            Constant(value=False),
                            Constant(value='passive')]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to logging.\n\n        Args:\n            strategy (`str` or [`~trainer_utils.IntervalStrategy`], *optional*, defaults to `"steps"`):\n                The logging strategy to adopt during training. Possible values are:\n\n                    - `"no"`: No logging is done during training.\n                    - `"epoch"`: Logging is done at the end of each epoch.\n                    - `"steps"`: Logging is done every `logging_steps`.\n\n            steps (`int`, *optional*, defaults to 500):\n                Number of update steps between two logs if `strategy="steps"`.\n            level (`str`, *optional*, defaults to `"passive"`):\n                Logger log level to use on the main process. Possible choices are the log levels as strings: `"debug"`,\n                `"info"`, `"warning"`, `"error"` and `"critical"`, plus a `"passive"` level which doesn\'t set anything\n                and lets the application set the level.\n            report_to (`str` or `List[str]`, *optional*, defaults to `"all"`):\n                The list of integrations to report the results and logs to. Supported platforms are `"azure_ml"`,\n                `"clearml"`, `"codecarbon"`, `"comet_ml"`, `"dagshub"`, `"dvclive"`, `"flyte"`, `"mlflow"`,\n                `"neptune"`, `"tensorboard"`, and `"wandb"`. Use `"all"` to report to all integrations installed,\n                `"none"` for no integrations.\n            first_step (`bool`, *optional*, defaults to `False`):\n                Whether to log and evaluate the first `global_step` or not.\n            nan_inf_filter (`bool`, *optional*, defaults to `True`):\n                Whether to filter `nan` and `inf` losses for logging. If set to `True` the loss of every step that is\n                `nan` or `inf` is filtered and the average loss of the current logging window is taken instead.\n\n                <Tip>\n\n                `nan_inf_filter` only influences the logging of loss values, it does not change the behavior the\n                gradient is computed or applied to the model.\n\n                </Tip>\n\n            on_each_node (`bool`, *optional*, defaults to `True`):\n                In multinode distributed training, whether to log using `log_level` once per node, or only on the main\n                node.\n            replica_level (`str`, *optional*, defaults to `"passive"`):\n                Logger log level to use on replicas. Same choices as `log_level`\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_logging(strategy="steps", steps=100)\n        >>> args.logging_steps\n        100\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='IntervalStrategy', ctx=Load()),
                                args=[
                                    Name(id='strategy', ctx=Load())],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='logging_strategy',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='IntervalStrategy', ctx=Load()),
                                                attr='STEPS',
                                                ctx=Load())]),
                                    Compare(
                                        left=Name(id='steps', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=0)])]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value="Setting `strategy` as 'steps' requires a positive value for `steps`.")],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_steps',
                                    ctx=Store())],
                            value=Name(id='steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='report_to',
                                    ctx=Store())],
                            value=Name(id='report_to', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='log_level',
                                    ctx=Store())],
                            value=Name(id='level', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_first_step',
                                    ctx=Store())],
                            value=Name(id='first_step', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='logging_nan_inf_filter',
                                    ctx=Store())],
                            value=Name(id='nan_inf_filter', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='log_on_each_node',
                                    ctx=Store())],
                            value=Name(id='on_each_node', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='log_level_replica',
                                    ctx=Store())],
                            value=Name(id='replica_level', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_push_to_hub',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='model_id',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='strategy',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='HubStrategy', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='token',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='str', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='private_repo',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='always_push',
                                annotation=Name(id='bool', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='every_save'),
                            Constant(value=None),
                            Constant(value=False),
                            Constant(value=False)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to synchronizing checkpoints with the Hub.\n\n        <Tip>\n\n        Calling this method will set `self.push_to_hub` to `True`, which means the `output_dir` will begin a git\n        directory synced with the repo (determined by `model_id`) and the content will be pushed each time a save is\n        triggered (depending on`self.save_strategy`). Calling [`~Trainer.save_model`] will also trigger a push.\n\n        </Tip>\n\n        Args:\n            model_id (`str`):\n                The name of the repository to keep in sync with the local *output_dir*. It can be a simple model ID in\n                which case the model will be pushed in your namespace. Otherwise it should be the whole repository\n                name, for instance `"user_name/model"`, which allows you to push to an organization you are a member of\n                with `"organization_name/model"`.\n            strategy (`str` or [`~trainer_utils.HubStrategy`], *optional*, defaults to `"every_save"`):\n                Defines the scope of what is pushed to the Hub and when. Possible values are:\n\n                - `"end"`: push the model, its configuration, the tokenizer (if passed along to the [`Trainer`]) and a\n                draft of a model card when the [`~Trainer.save_model`] method is called.\n                - `"every_save"`: push the model, its configuration, the tokenizer (if passed along to the [`Trainer`])\n                  and\n                a draft of a model card each time there is a model save. The pushes are asynchronous to not block\n                training, and in case the save are very frequent, a new push is only attempted if the previous one is\n                finished. A last push is made with the final model at the end of training.\n                - `"checkpoint"`: like `"every_save"` but the latest checkpoint is also pushed in a subfolder named\n                last-checkpoint, allowing you to resume training easily with\n                `trainer.train(resume_from_checkpoint="last-checkpoint")`.\n                - `"all_checkpoints"`: like `"checkpoint"` but all checkpoints are pushed like they appear in the\n                  output\n                folder (so you will get one checkpoint folder per folder in your final repository)\n\n            token (`str`, *optional*):\n                The token to use to push the model to the Hub. Will default to the token in the cache folder obtained\n                with `huggingface-cli login`.\n            private_repo (`bool`, *optional*, defaults to `False`):\n                If True, the Hub repo will be set to private.\n            always_push (`bool`, *optional*, defaults to `False`):\n                Unless this is `True`, the `Trainer` will skip pushing a checkpoint when the previous push is not\n                finished.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_push_to_hub("me/awesome-model")\n        >>> args.hub_model_id\n        \'me/awesome-model\'\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='push_to_hub',
                                    ctx=Store())],
                            value=Constant(value=True)),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_model_id',
                                    ctx=Store())],
                            value=Name(id='model_id', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_strategy',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='HubStrategy', ctx=Load()),
                                args=[
                                    Name(id='strategy', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_token',
                                    ctx=Store())],
                            value=Name(id='token', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_private_repo',
                                    ctx=Store())],
                            value=Name(id='private_repo', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='hub_always_push',
                                    ctx=Store())],
                            value=Name(id='always_push', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_optimizer',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='name',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='OptimizerNames', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='learning_rate',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='weight_decay',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='beta1',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='beta2',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='epsilon',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='args',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='str', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='adamw_torch'),
                            Constant(value=5e-05),
                            Constant(value=0),
                            Constant(value=0.9),
                            Constant(value=0.999),
                            Constant(value=1e-08),
                            Constant(value=None)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to the optimizer and its hyperparameters.\n\n        Args:\n            name (`str` or [`training_args.OptimizerNames`], *optional*, defaults to `"adamw_torch"`):\n                The optimizer to use: `"adamw_hf"`, `"adamw_torch"`, `"adamw_torch_fused"`, `"adamw_apex_fused"`,\n                `"adamw_anyprecision"` or `"adafactor"`.\n            learning_rate (`float`, *optional*, defaults to 5e-5):\n                The initial learning rate.\n            weight_decay (`float`, *optional*, defaults to 0):\n                The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights.\n            beta1 (`float`, *optional*, defaults to 0.9):\n                The beta1 hyperparameter for the adam optimizer or its variants.\n            beta2 (`float`, *optional*, defaults to 0.999):\n                The beta2 hyperparameter for the adam optimizer or its variants.\n            epsilon (`float`, *optional*, defaults to 1e-8):\n                The epsilon hyperparameter for the adam optimizer or its variants.\n            args (`str`, *optional*):\n                Optional arguments that are supplied to AnyPrecisionAdamW (only useful when\n                `optim="adamw_anyprecision"`).\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_optimizer(name="adamw_torch", beta1=0.8)\n        >>> args.optim\n        \'adamw_torch\'\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='optim',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='OptimizerNames', ctx=Load()),
                                args=[
                                    Name(id='name', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='learning_rate',
                                    ctx=Store())],
                            value=Name(id='learning_rate', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='weight_decay',
                                    ctx=Store())],
                            value=Name(id='weight_decay', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='adam_beta1',
                                    ctx=Store())],
                            value=Name(id='beta1', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='adam_beta2',
                                    ctx=Store())],
                            value=Name(id='beta2', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='adam_epsilon',
                                    ctx=Store())],
                            value=Name(id='epsilon', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='optim_args',
                                    ctx=Store())],
                            value=Name(id='args', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_lr_scheduler',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='name',
                                annotation=Subscript(
                                    value=Name(id='Union', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='str', ctx=Load()),
                                            Name(id='SchedulerType', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='num_epochs',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='max_steps',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='warmup_ratio',
                                annotation=Name(id='float', ctx=Load())),
                            arg(
                                arg='warmup_steps',
                                annotation=Name(id='int', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value='linear'),
                            Constant(value=3.0),
                            UnaryOp(
                                op=USub(),
                                operand=Constant(value=1)),
                            Constant(value=0),
                            Constant(value=0)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to the learning rate scheduler and its hyperparameters.\n\n        Args:\n            name (`str` or [`SchedulerType`], *optional*, defaults to `"linear"`):\n                The scheduler type to use. See the documentation of [`SchedulerType`] for all possible values.\n            num_epochs(`float`, *optional*, defaults to 3.0):\n                Total number of training epochs to perform (if not an integer, will perform the decimal part percents\n                of the last epoch before stopping training).\n            max_steps (`int`, *optional*, defaults to -1):\n                If set to a positive number, the total number of training steps to perform. Overrides `num_train_epochs`.\n                For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until\n                `max_steps` is reached.\n            warmup_ratio (`float`, *optional*, defaults to 0.0):\n                Ratio of total training steps used for a linear warmup from 0 to `learning_rate`.\n            warmup_steps (`int`, *optional*, defaults to 0):\n                Number of steps used for a linear warmup from 0 to `learning_rate`. Overrides any effect of\n                `warmup_ratio`.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_lr_scheduler(name="cosine", warmup_ratio=0.05)\n        >>> args.warmup_ratio\n        0.05\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='lr_scheduler_type',
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='SchedulerType', ctx=Load()),
                                args=[
                                    Name(id='name', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='num_train_epochs',
                                    ctx=Store())],
                            value=Name(id='num_epochs', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='max_steps',
                                    ctx=Store())],
                            value=Name(id='max_steps', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='warmup_ratio',
                                    ctx=Store())],
                            value=Name(id='warmup_ratio', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='warmup_steps',
                                    ctx=Store())],
                            value=Name(id='warmup_steps', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[]),
                FunctionDef(
                    name='set_dataloader',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='train_batch_size',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='eval_batch_size',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='drop_last',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='num_workers',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='pin_memory',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='persistent_workers',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='prefetch_factor',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='int', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='auto_find_batch_size',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='ignore_data_skip',
                                annotation=Name(id='bool', ctx=Load())),
                            arg(
                                arg='sampler_seed',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='int', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=8),
                            Constant(value=8),
                            Constant(value=False),
                            Constant(value=0),
                            Constant(value=True),
                            Constant(value=False),
                            Constant(value=None),
                            Constant(value=False),
                            Constant(value=False),
                            Constant(value=None)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        A method that regroups all arguments linked to the dataloaders creation.\n\n        Args:\n            drop_last (`bool`, *optional*, defaults to `False`):\n                Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch\n                size) or not.\n            num_workers (`int`, *optional*, defaults to 0):\n                Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in\n                the main process.\n            pin_memory (`bool`, *optional*, defaults to `True`):\n                Whether you want to pin memory in data loaders or not. Will default to `True`.\n            persistent_workers (`bool`, *optional*, defaults to `False`):\n                If True, the data loader will not shut down the worker processes after a dataset has been consumed\n                once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training,\n                but will increase RAM usage. Will default to `False`.\n            prefetch_factor (`int`, *optional*):\n                Number of batches loaded in advance by each worker.\n                2 means there will be a total of 2 * num_workers batches prefetched across all workers.\n            auto_find_batch_size (`bool`, *optional*, defaults to `False`)\n                Whether to find a batch size that will fit into memory automatically through exponential decay,\n                avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed (`pip install accelerate`)\n            ignore_data_skip (`bool`, *optional*, defaults to `False`):\n                When resuming training, whether or not to skip the epochs and batches to get the data loading at the\n                same stage as in the previous training. If set to `True`, the training will begin faster (as that\n                skipping step can take a long time) but will not yield the same results as the interrupted training\n                would have.\n            sampler_seed (`int`, *optional*):\n                Random seed to be used with data samplers. If not set, random generators for data sampling will use the\n                same seed as `self.seed`. This can be used to ensure reproducibility of data sampling, independent of\n                the model seed.\n\n        Example:\n\n        ```py\n        >>> from transformers import TrainingArguments\n\n        >>> args = TrainingArguments("working_dir")\n        >>> args = args.set_dataloader(train_batch_size=16, eval_batch_size=64)\n        >>> args.per_device_train_batch_size\n        16\n        ```\n        ')),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='per_device_train_batch_size',
                                    ctx=Store())],
                            value=Name(id='train_batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='per_device_eval_batch_size',
                                    ctx=Store())],
                            value=Name(id='eval_batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='dataloader_drop_last',
                                    ctx=Store())],
                            value=Name(id='drop_last', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='dataloader_num_workers',
                                    ctx=Store())],
                            value=Name(id='num_workers', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='dataloader_pin_memory',
                                    ctx=Store())],
                            value=Name(id='pin_memory', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='dataloader_persistent_workers',
                                    ctx=Store())],
                            value=Name(id='persistent_workers', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='dataloader_prefetch_factor',
                                    ctx=Store())],
                            value=Name(id='prefetch_factor', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='auto_find_batch_size',
                                    ctx=Store())],
                            value=Name(id='auto_find_batch_size', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='ignore_data_skip',
                                    ctx=Store())],
                            value=Name(id='ignore_data_skip', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='data_seed',
                                    ctx=Store())],
                            value=Name(id='sampler_seed', ctx=Load())),
                        Return(
                            value=Name(id='self', ctx=Load()))],
                    decorator_list=[],
                    type_params=[])],
            decorator_list=[
                Name(id='dataclass', ctx=Load())],
            type_params=[]),
        ClassDef(
            name='ParallelMode',
            bases=[
                Name(id='Enum', ctx=Load())],
            keywords=[],
            body=[
                Assign(
                    targets=[
                        Name(id='NOT_PARALLEL', ctx=Store())],
                    value=Constant(value='not_parallel')),
                Assign(
                    targets=[
                        Name(id='NOT_DISTRIBUTED', ctx=Store())],
                    value=Constant(value='not_distributed')),
                Assign(
                    targets=[
                        Name(id='DISTRIBUTED', ctx=Store())],
                    value=Constant(value='distributed')),
                Assign(
                    targets=[
                        Name(id='SAGEMAKER_MODEL_PARALLEL', ctx=Store())],
                    value=Constant(value='sagemaker_model_parallel')),
                Assign(
                    targets=[
                        Name(id='SAGEMAKER_DATA_PARALLEL', ctx=Store())],
                    value=Constant(value='sagemaker_data_parallel')),
                Assign(
                    targets=[
                        Name(id='TPU', ctx=Store())],
                    value=Constant(value='tpu'))],
            decorator_list=[],
            type_params=[])],
    type_ignores=[])